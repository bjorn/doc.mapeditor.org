{
    "docs": [
        {
            "location": "/",
            "text": "Tiled Documentation\n\n\nWelcome to the documentation pages for \nTiled\n, a\nflexible tile map editor! Here you will find the\n\nTiled User Manual\n and the\n\nTMX Map Format\n reference.\n\n\nIf you're not finding what you're looking for in these pages, please don't\nhesitate to ask questions on the \nTiled Forum\n.\n\n\nThis documentation is currently work-in-progress. Initially the relevant pages\nfrom the wiki have been ported over, providing a limited amount of\ndocumentation for specific Tiled features. Over time, this should become the\nplace to refer to for any details about using Tiled.\n\n\nIndex\n\n\nTiled User Manual\n\n\n\n\nUsing the Terrain Tool\n\n\nUsing Commands\n\n\n\n\nReference\n\n\n\n\nTMX Map Format\n\n\nTMX Changelog\n\n\nLibraries and Frameworks",
            "title": "Home"
        },
        {
            "location": "/#tiled-documentation",
            "text": "Welcome to the documentation pages for  Tiled , a\nflexible tile map editor! Here you will find the Tiled User Manual  and the TMX Map Format  reference.  If you're not finding what you're looking for in these pages, please don't\nhesitate to ask questions on the  Tiled Forum .  This documentation is currently work-in-progress. Initially the relevant pages\nfrom the wiki have been ported over, providing a limited amount of\ndocumentation for specific Tiled features. Over time, this should become the\nplace to refer to for any details about using Tiled.",
            "title": "Tiled Documentation"
        },
        {
            "location": "/#index",
            "text": "Tiled User Manual   Using the Terrain Tool  Using Commands   Reference   TMX Map Format  TMX Changelog  Libraries and Frameworks",
            "title": "Index"
        },
        {
            "location": "/manual/",
            "text": "Tiled User Manual\n\n\nThis documentation is currently work-in-progress. Initially the relevant pages\nfrom the wiki have been ported over, providing a limited amount of\ndocumentation for specific Tiled features. Over time, this should become the\nplace to refer to for any details about using Tiled.\n\n\nContents\n\n\n\n\nUsing the Terrain Tool\n\n\nUsing Commands",
            "title": "Contents"
        },
        {
            "location": "/manual/#tiled-user-manual",
            "text": "This documentation is currently work-in-progress. Initially the relevant pages\nfrom the wiki have been ported over, providing a limited amount of\ndocumentation for specific Tiled features. Over time, this should become the\nplace to refer to for any details about using Tiled.",
            "title": "Tiled User Manual"
        },
        {
            "location": "/manual/#contents",
            "text": "Using the Terrain Tool  Using Commands",
            "title": "Contents"
        },
        {
            "location": "/manual/using-the-terrain-tool/",
            "text": "Using the Terrain Tool\n\n\nStarting with Tiled 0.9.0, a new tool was added specifically to make editing tile maps easier when using terrain transitions. There are of course multiple ways to do transitions between tiles. The Terrain tool in Tiled supports transition tiles that have a well-defined terrain type at each of their 4 corners, which seems to be the most common method.\n\n\nTo demonstrate how to use this tool I will describe the steps necessary to reproduce the \ndesert.tmx\n example map, which now also includes terrain information in its tileset.\n\n\nCreate a New Map and Add a Tileset\n\n\nFirst of all create a new orthogonal map with a tile size of 32x32 pixels.\n\n\n\n\nThen, add the \ntmw_desert_spacing.png\n example tileset. This tileset uses a margin and spacing of 1 pixel (which is only to test if this functionality works, not because I'd recommend doing that).\n\n\n\n\nThis tileset has 4 different terrain types. Traditionally editing a map with these tiles meant that you had to carefully connect the right transitions to avoid broken edges. Now we will define the terrain information for this tileset, which the Terrain tool will use to automatically place the right transitions.\n\n\nDefine the Terrain Information\n\n\nClick the small \"Edit Terrain Information\" button.\n\n\n\n\nThis dialog displays the list of terrain types in the tileset and allows you to mark corners of the tiles in your tileset as belonging to a certain terrain type. To start with, add each of the 4 terrain types. The fastest way is by right-clicking on a tile representing a certain terrain and choosing \"Add Terrain Type\". This automatically sets the tile as the image representing the terrain.\n\n\n\n\nGive each of the terrains an appropriate name. Once you're done, select the sand terrain and mark all corners in the tileset with this type of terrain. When you're done it should look like this:\n\n\n\n\nIf you make a mistake, just use Undo (or press \nCtrl+Z\n). Or if you notice a mistake later, either use the eraser to clear a terrain type from a corner or select the correct terrain type and paint over it.\n\n\nDo the same for each of the other terrain types. Eventually you'll have marked all tiles apart from the special objects.\n\n\n\n\nNow close the dialog so we can start trying out the Terrain tool.\n\n\nEditing with the Terrain Tool\n\n\nSwitch from the Tilesets to the Terrains window. You should see the 4 terrain types represented in a list. Click on the sand terrain and start painting. You may immediately notice that nothing special is happening. This is because there are no other tiles on the map yet so the terrain tool doesn't really know how to help (because we have no transitions to \"nothing\" in our tileset). Assuming we're out to create a desert map, it's better to start by filling your entire map with sand. Just switch back to the Tilesets window for a moment, select the sand tile and then use the Fill tool.\n\n\nLet's switch back to the Terrains window and draw some cobblestones. Now you can see the tool in action!\n\n\n\n\nTry holding \nControl\n (\ncommand\n on a Mac) while drawing. This reduces the modified area to just the closest corner to the mouse, allowing for precision work.\n\n\nFinally, see what happens when you try drawing some dirt on the cobblestone. Because there are no transitions from dirt directly to cobblestone, the Terrain tool first inserts transitions to sand and from there to cobblestone. Neat!\n\n\n\n\nFinal Words\n\n\nNow you should have a pretty good idea about how to use this tool in your own project. A few things to keep in mind:\n\n\n\n\n\n\nCurrently the tool requires all terrain types to be part of the same tileset. You can have multiple tilesets with terrain in your map, but the tool can't perform automatic transitions from a terrain from one tileset to a terrain in another tileset. This usually means you may have to combine several tiles into one image.\n\n\n\n\n\n\nSince defining the terrain information can be somewhat laboursome, you'll want to use the external tilesets feature of Tiled to share not only the image but also the terrain information among several maps. Note however, that it is not possible to edit the terrain information while the tileset is external. To work around this problem just temporarily import the tileset and then export it again.\n\n\n\n\n\n\nThe Terrain tool works fine with isometric maps as well (though not with the new \"staggered\" isometric maps). However, the Edit Terrain Information dialog is currently not able to render the overlay correctly for isometric tiles. When defining terrain for isometric tiles, imagine the top-left corner applies to the top of your isometric tile, the top-right corner applies to the right corner of your tile, etc. Check out the \nisometric_grass_and_water.tmx\n example when in doubt.\n\n\n\n\n\n\nThe tool will handle any number of terrain types and each corner of a tile can have a different type of terrain. Still, there are other ways of dealing with transitions that this tool can't handle. Also, it is not able to edit multiple layers at the same time. For a more flexible, but also more complicated way of automatic tile placement, check out [[Automapping]].\n\n\n\n\n\n\nI'm maintaining a \ncollection of tilesets\n that contain transitions that are compatible with this tool on \nOpenGameArt.org\n.",
            "title": "Using the Terrain Tool"
        },
        {
            "location": "/manual/using-the-terrain-tool/#using-the-terrain-tool",
            "text": "Starting with Tiled 0.9.0, a new tool was added specifically to make editing tile maps easier when using terrain transitions. There are of course multiple ways to do transitions between tiles. The Terrain tool in Tiled supports transition tiles that have a well-defined terrain type at each of their 4 corners, which seems to be the most common method.  To demonstrate how to use this tool I will describe the steps necessary to reproduce the  desert.tmx  example map, which now also includes terrain information in its tileset.",
            "title": "Using the Terrain Tool"
        },
        {
            "location": "/manual/using-the-terrain-tool/#create-a-new-map-and-add-a-tileset",
            "text": "First of all create a new orthogonal map with a tile size of 32x32 pixels.   Then, add the  tmw_desert_spacing.png  example tileset. This tileset uses a margin and spacing of 1 pixel (which is only to test if this functionality works, not because I'd recommend doing that).   This tileset has 4 different terrain types. Traditionally editing a map with these tiles meant that you had to carefully connect the right transitions to avoid broken edges. Now we will define the terrain information for this tileset, which the Terrain tool will use to automatically place the right transitions.",
            "title": "Create a New Map and Add a Tileset"
        },
        {
            "location": "/manual/using-the-terrain-tool/#define-the-terrain-information",
            "text": "Click the small \"Edit Terrain Information\" button.   This dialog displays the list of terrain types in the tileset and allows you to mark corners of the tiles in your tileset as belonging to a certain terrain type. To start with, add each of the 4 terrain types. The fastest way is by right-clicking on a tile representing a certain terrain and choosing \"Add Terrain Type\". This automatically sets the tile as the image representing the terrain.   Give each of the terrains an appropriate name. Once you're done, select the sand terrain and mark all corners in the tileset with this type of terrain. When you're done it should look like this:   If you make a mistake, just use Undo (or press  Ctrl+Z ). Or if you notice a mistake later, either use the eraser to clear a terrain type from a corner or select the correct terrain type and paint over it.  Do the same for each of the other terrain types. Eventually you'll have marked all tiles apart from the special objects.   Now close the dialog so we can start trying out the Terrain tool.",
            "title": "Define the Terrain Information"
        },
        {
            "location": "/manual/using-the-terrain-tool/#editing-with-the-terrain-tool",
            "text": "Switch from the Tilesets to the Terrains window. You should see the 4 terrain types represented in a list. Click on the sand terrain and start painting. You may immediately notice that nothing special is happening. This is because there are no other tiles on the map yet so the terrain tool doesn't really know how to help (because we have no transitions to \"nothing\" in our tileset). Assuming we're out to create a desert map, it's better to start by filling your entire map with sand. Just switch back to the Tilesets window for a moment, select the sand tile and then use the Fill tool.  Let's switch back to the Terrains window and draw some cobblestones. Now you can see the tool in action!   Try holding  Control  ( command  on a Mac) while drawing. This reduces the modified area to just the closest corner to the mouse, allowing for precision work.  Finally, see what happens when you try drawing some dirt on the cobblestone. Because there are no transitions from dirt directly to cobblestone, the Terrain tool first inserts transitions to sand and from there to cobblestone. Neat!",
            "title": "Editing with the Terrain Tool"
        },
        {
            "location": "/manual/using-the-terrain-tool/#final-words",
            "text": "Now you should have a pretty good idea about how to use this tool in your own project. A few things to keep in mind:    Currently the tool requires all terrain types to be part of the same tileset. You can have multiple tilesets with terrain in your map, but the tool can't perform automatic transitions from a terrain from one tileset to a terrain in another tileset. This usually means you may have to combine several tiles into one image.    Since defining the terrain information can be somewhat laboursome, you'll want to use the external tilesets feature of Tiled to share not only the image but also the terrain information among several maps. Note however, that it is not possible to edit the terrain information while the tileset is external. To work around this problem just temporarily import the tileset and then export it again.    The Terrain tool works fine with isometric maps as well (though not with the new \"staggered\" isometric maps). However, the Edit Terrain Information dialog is currently not able to render the overlay correctly for isometric tiles. When defining terrain for isometric tiles, imagine the top-left corner applies to the top of your isometric tile, the top-right corner applies to the right corner of your tile, etc. Check out the  isometric_grass_and_water.tmx  example when in doubt.    The tool will handle any number of terrain types and each corner of a tile can have a different type of terrain. Still, there are other ways of dealing with transitions that this tool can't handle. Also, it is not able to edit multiple layers at the same time. For a more flexible, but also more complicated way of automatic tile placement, check out [[Automapping]].    I'm maintaining a  collection of tilesets  that contain transitions that are compatible with this tool on  OpenGameArt.org .",
            "title": "Final Words"
        },
        {
            "location": "/manual/using-commands/",
            "text": "Using Commands\n\n\nThe Command Button allows you to create and run shell commands (other programs) from Tiled.\n\n\nYou may setup as many commands as you like. This is useful if you edit maps for multiple games and you want to set up a command for each game. Or you could setup multiple commands for the same game that load different checkpoints or configurations.\n\n\nThe Command Button\n\n\nIt is located on the main toolbar to the right of the redo button. Clicking on it will run the default command (the first command in the command list). Clicking the arrow next to it will bring down a menu that allows you to run any command you have set up, as well as an option to open the Edit Commands dialog.\n\n\nYou can press F5 as a shortcut to clicking the button to run the default command.\n\n\nEditing Commands\n\n\nThe 'Edit Commands' dialog contains a list of commands. Each command has several properties:\n\n\n\n\nName\n: The name of the command as it will be shown in the drop down list, so you can easily identify it.\n\n\nCommand\n: The actual shell command to execute. This probably starts with an executable program followed by arguments.\n\n\nThe token \n%mapfile\n is replaced with the current maps full path.\n\n\nThe token \n%objecttype\n is replaced with the type of the currently selected object, if any. (since Tiled 0.12)\n\n\n\n\n\n\nEnabled\n: A quick way to disable commands and remove them from the drop down list.\n\n\nThe default command is the first enabled command.\n\n\n\n\n\n\n\n\nYou can also change whether or not it should save the current map before running commands.\n\n\nExample Commands\n\n\nLaunching a custom game called \"mygame\" with a -loadmap parameter and the mapfile:\n\n\nmygame -loadmap %mapfile\n\n\n\nOn Mac, remember that Apps are folders, so you need to run the actual executable from within the \nContents/MacOS\n folder:\n\n\n/Applications/TextEdit.app/Contents/MacOS/TextEdit %mapfile\n\n\n\nSome OS's also have a command to open files in the appropriate program:\n\n\n\n\nOSX: \nopen %mapfile\n\n\nGNOME systems like Ubuntu: \ngnome-open %mapfile\n\n\nFreeDesktop.org standard: \nxdg-open %mapfile",
            "title": "Using Commands"
        },
        {
            "location": "/manual/using-commands/#using-commands",
            "text": "The Command Button allows you to create and run shell commands (other programs) from Tiled.  You may setup as many commands as you like. This is useful if you edit maps for multiple games and you want to set up a command for each game. Or you could setup multiple commands for the same game that load different checkpoints or configurations.",
            "title": "Using Commands"
        },
        {
            "location": "/manual/using-commands/#the-command-button",
            "text": "It is located on the main toolbar to the right of the redo button. Clicking on it will run the default command (the first command in the command list). Clicking the arrow next to it will bring down a menu that allows you to run any command you have set up, as well as an option to open the Edit Commands dialog.  You can press F5 as a shortcut to clicking the button to run the default command.",
            "title": "The Command Button"
        },
        {
            "location": "/manual/using-commands/#editing-commands",
            "text": "The 'Edit Commands' dialog contains a list of commands. Each command has several properties:   Name : The name of the command as it will be shown in the drop down list, so you can easily identify it.  Command : The actual shell command to execute. This probably starts with an executable program followed by arguments.  The token  %mapfile  is replaced with the current maps full path.  The token  %objecttype  is replaced with the type of the currently selected object, if any. (since Tiled 0.12)    Enabled : A quick way to disable commands and remove them from the drop down list.  The default command is the first enabled command.     You can also change whether or not it should save the current map before running commands.",
            "title": "Editing Commands"
        },
        {
            "location": "/manual/using-commands/#example-commands",
            "text": "Launching a custom game called \"mygame\" with a -loadmap parameter and the mapfile:  mygame -loadmap %mapfile  On Mac, remember that Apps are folders, so you need to run the actual executable from within the  Contents/MacOS  folder:  /Applications/TextEdit.app/Contents/MacOS/TextEdit %mapfile  Some OS's also have a command to open files in the appropriate program:   OSX:  open %mapfile  GNOME systems like Ubuntu:  gnome-open %mapfile  FreeDesktop.org standard:  xdg-open %mapfile",
            "title": "Example Commands"
        },
        {
            "location": "/reference/tmx-map-format/",
            "text": "TMX Map Format\n\n\nThe TMX (Tile Map XML) map format used by \nTiled\n is a flexible way to describe a tile based map. It can describe maps with any tile size, any amount of layers, any number of tile sets and it allows custom properties to be set on most elements. Beside tile layers, it can also contain groups of objects that can be placed freely.\n\n\nNote that there are many \nlibraries and frameworks\n available that can work with TMX maps.\n\n\nIn this document we'll go through each element found in this map format. The elements are mentioned in the headers and the list of attributes of the elements are listed right below, followed by a short explanation. Attributes or elements that are deprecated or unsupported by the current version of Tiled are formatted in italics.\n\n\nHave a look at the \nchangelog\n when you're interested in what changed between Tiled versions.\n\n\nA DTD-file (Document Type Definition) is served at \nhttp://mapeditor.org/dtd/1.0/map.dtd\n. This file is not up-to-date but might be useful for XML-namespacing anyway.\n\n\nmap\n\n\n\n\nversion:\n The TMX format version, generally 1.0.\n\n\norientation:\n Map orientation. Tiled supports \"orthogonal\", \"isometric\" and \"staggered\" (since 0.9) at the moment.\n\n\nwidth:\n The map width in tiles.\n\n\nheight:\n The map height in tiles.\n\n\ntilewidth:\n The width of a tile.\n\n\ntileheight:\n The height of a tile.\n\n\nbackgroundcolor:\n The background color of the map. (since 0.9, optional)\n\n\nrenderorder:\n The order in which tiles on tile layers are rendered. Valid values are \nright-down\n (the default), \nright-up\n, \nleft-down\n and \nleft-up\n. In all cases, the map is drawn row-by-row. (since 0.10, but only supported for orthogonal maps at the moment)\n\n\n\n\nThe \ntilewidth\n and \ntileheight\n properties determine the general grid size of the map. The individual tiles may have different sizes. Larger tiles will extend at the top and right (anchored to the bottom left).\n\n\nA map contains three different kinds of layers. Tile layers were once the only type, and are simply called \nlayer\n, object layers have the \nobjectgroup\n tag and image layers use the \nimagelayer\n tag. The order in which these layers appear is the order in which the layers are rendered by Tiled.\n\n\nCan contain: \nproperties\n, \ntileset\n, \nlayer\n, \nobjectgroup\n, \nimagelayer\n\n\ntileset\n\n\n\n\nfirstgid:\n The first global tile ID of this tileset (this global ID maps to the first tile in this tileset).\n\n\nsource:\n If this tileset is stored in an external TSX (Tile Set XML) file, this attribute refers to that file. That TSX file has the same structure as the \ntileset\n element described here. (There is the \nfirstgid\n attribute missing and this \nsource\n attribute is also not there. These two attributes are kept in the TMX map, since they are map specific.)\n\n\nname:\n The name of this tileset.\n\n\ntilewidth:\n The (maximum) width of the tiles in this tileset.\n\n\ntileheight:\n The (maximum) height of the tiles in this tileset.\n\n\nspacing:\n The spacing in pixels between the tiles in this tileset (applies to the tileset image).\n\n\nmargin:\n The margin around the tiles in this tileset (applies to the tileset image).\n\n\n\n\nIf there are multiple \ntileset\n elements, they are in ascending order of their \nfirstgid\n attribute. The first tileset always has a \nfirstgid\n value of 1 and it can be assumed that there are no gaps in the valid range of global tile IDs.\n\n\nCan contain: \ntileoffset\n (since 0.8), \nproperties\n (since 0.8), \nimage\n, \nterraintypes\n (since 0.9), \ntile\n\n\ntileoffset\n\n\n\n\nx:\n Horizontal offset in pixels\n\n\ny:\n Vertical offset in pixels (positive is down)\n\n\n\n\nThis element is used to specify an offset in pixels, to be applied when drawing a tile from the related tileset. When not present, no offset is applied.\n\n\nimage\n\n\n\n\nformat:\n Used for embedded images, in combination with a \ndata\n child element. Valid values are file extensions like \npng\n, \ngif\n, \njpg\n, \nbmp\n, etc. (since 0.9)\n\n\nid:\n Used by some versions of Tiled Java. Deprecated and unsupported by Tiled Qt.\n\n\nsource:\n The reference to the tileset image file (Tiled supports most common image formats).\n\n\ntrans:\n Defines a specific color that is treated as transparent (example value: \"#FF00FF\" for magenta). Up until Tiled 0.12, this value is written out without a \n#\n but this is planned to change.\n\n\nwidth:\n The image width in pixels (optional, used for tile index correction when the image changes)\n\n\nheight:\n The image height in pixels (optional)\n\n\n\n\nCan contain: \ndata\n (since 0.9)\n\n\nterraintypes\n\n\nThis element defines an array of terrain types, which can be referenced from the \nterrain\n attribute of the \ntile\n element.\n\n\nCan contain: \nterrain\n\n\nterrain\n\n\n\n\nname:\n The name of the terrain type.\n\n\ntile:\n The local tile-id of the tile that represents the terrain visually.\n\n\n\n\nCan contain: \nproperties\n\n\ntile\n\n\n\n\nid:\n The local tile ID within its tileset.\n\n\nterrain:\n Defines the terrain type of each corner of the tile, given as comma-separated indexes in the terrain types array in the order top-left, top-right, bottom-left, bottom-right. Leaving out a value means that corner has no terrain. (optional) (since 0.9)\n\n\nprobability:\n A percentage indicating the probability that this tile is chosen when it competes with others while editing with the terrain tool. (optional) (since 0.9)\n\n\n\n\nCan contain: \nproperties\n, \nimage\n (since 0.9), \nobjectgroup\n (since 0.10), \nanimation\n (since 0.10)\n\n\nanimation\n\n\nContains a list of animation frames.\n\n\nAs of Tiled 0.10, each tile can have exactly one animation associated with it. In the future, there could be support for multiple named animations on a tile.\n\n\nCan contain: \nframe\n\n\nframe\n\n\n\n\ntileid\n: The local ID of a tile within the parent \ntileset\n.\n\n\nduration\n: How long (in milliseconds) this frame should be displayed before advancing to the next frame.\n\n\n\n\nlayer\n\n\nAll \ntileset\n tags shall occur before the first \nlayer\n tag so that parsers may rely on having the tilesets before needing to resolve tiles.\n\n\n\n\nname:\n The name of the layer.\n\n\nx:\n The x coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\ny:\n The y coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\nwidth:\n The width of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map width.\n\n\nheight:\n The height of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map height.\n\n\nopacity:\n The opacity of the layer as a value from 0 to 1. Defaults to 1.\n\n\nvisible:\n Whether the layer is shown (1) or hidden (0). Defaults to 1.\n\n\n\n\nCan contain: \nproperties\n, \ndata\n\n\ndata\n\n\n\n\nencoding:\n The encoding used to encode the tile layer data. When used, it can be \"base64\" and \"csv\" at the moment.\n\n\ncompression:\n The compression used to compress the tile layer data. Tiled Qt supports \"gzip\" and \"zlib\".\n\n\n\n\nWhen no encoding or compression is given, the tiles are stored as individual XML \ntile\n elements. Next to that, the easiest format to parse is the \"csv\" (comma separated values) format.\n\n\nThe base64-encoded and optionally compressed layer data is somewhat more complicated to parse. First you need to base64-decode it, then you may need to decompress it. Now you have an array of bytes, which should be interpreted as an array of unsigned 32-bit integers using little-endian byte ordering.\n\n\nWhatever format you choose for your layer data, you will always end up with so called \"global tile IDs\" (gids). They are global, since they may refer to a tile from any of the tilesets used by the map. In order to find out from which tileset the tile is you need to find the tileset with the highest \nfirstgid\n that is still lower or equal than the gid. The tilesets are always stored with increasing \nfirstgid\ns.\n\n\nCan contain: \ntile\n\n\nTile flipping\n\n\nWhen you use the tile flipping feature added in Tiled Qt 0.7, the highest two bits of the gid store the flipped state. Bit 32 is used for storing whether the tile is horizontally flipped and bit 31 is used for the vertically flipped tiles. And since Tiled Qt 0.8, bit 30 means whether the tile is flipped (anti) diagonally, enabling tile rotation. These bits have to be read and cleared \nbefore\n you can find out which tileset a tile belongs to.\n\n\nWhen rendering a tile, the order of operation matters. The diagonal flip (x/y axis swap) is done first, followed by the horizontal and vertical flips.\n\n\nThe following C++ pseudo-code should make it all clear:\n\n\n// Bits on the far end of the 32-bit global tile ID are used for tile flags\nconst unsigned FLIPPED_HORIZONTALLY_FLAG = 0x80000000;\nconst unsigned FLIPPED_VERTICALLY_FLAG   = 0x40000000;\nconst unsigned FLIPPED_DIAGONALLY_FLAG   = 0x20000000;\n\n...\n\n// Extract the contents of the \ndata\n element\nstring tile_data = ...\n\nunsigned char *data = decompress(base64_decode(tile_data));\nunsigned tile_index = 0;\n\n// Here you should check that the data has the right size\n// (map_width * map_height * 4)\n\nfor (int y = 0; y \n map_height; ++y) {\n  for (int x = 0; x \n map_width; ++x) {\n    unsigned global_tile_id = data[tile_index] |\n                              data[tile_index + 1] \n 8 |\n                              data[tile_index + 2] \n 16 |\n                              data[tile_index + 3] \n 24;\n    tile_index += 4;\n\n    // Read out the flags\n    bool flipped_horizontally = (global_tile_id \n FLIPPED_HORIZONTALLY_FLAG);\n    bool flipped_vertically = (global_tile_id \n FLIPPED_VERTICALLY_FLAG);\n    bool flipped_diagonally = (global_tile_id \n FLIPPED_DIAGONALLY_FLAG);\n\n    // Clear the flags\n    global_tile_id \n= ~(FLIPPED_HORIZONTALLY_FLAG |\n                        FLIPPED_VERTICALLY_FLAG |\n                        FLIPPED_DIAGONALLY_FLAG);\n\n    // Resolve the tile\n    for (int i = tileset_count - 1; i \n= 0; --i) {\n      Tileset *tileset = tilesets[i];\n\n      if (tileset-\nfirst_gid() \n= global_tile_id) {\n        tiles[y][x] = tileset-\ntileAt(global_tile_id - tileset-\nfirst_gid());\n        break;\n      }\n    }\n  }\n}\n\n\n\n(Since the above code was put together on this wiki page and can't be directly tested, please make sure to report any errors you encounter when basing your parsing code on it, thanks.)\n\n\ntile\n\n\n\n\ngid:\n The global tile ID.\n\n\n\n\nNot to be confused with the \ntile\n element inside a \ntileset\n, this element defines the value of a single tile on a tile layer. This is however the most inefficient way of storing the tile layer data, and should generally be avoided.\n\n\nobjectgroup\n\n\n\n\nname:\n The name of the object group.\n\n\ncolor:\n The color used to display the objects in this group.\n\n\nx:\n The x coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\ny:\n The y coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\nwidth:\n The width of the object group in tiles. Meaningless.\n\n\nheight:\n The height of the object group in tiles. Meaningless.\n\n\nopacity:\n The opacity of the layer as a value from 0 to 1. Defaults to 1.\n\n\nvisible:\n Whether the layer is shown (1) or hidden (0). Defaults to 1.\n\n\ndraworder:\n Whether the objects are drawn according to the order of appearance (\"index\") or sorted by their y-coordinate (\"topdown\"). Defaults to \"topdown\".\n\n\n\n\nThe object group is in fact a map layer, and is hence called \"object layer\" in Tiled Qt.\n\n\nCan contain: \nproperties\n, \nobject\n\n\nobject\n\n\n\n\nid:\n Unique ID of the object. Each object that is placed on a map gets a unique id. Even if an object was deleted, no object gets the same ID. Can not be changed in Tiled Qt. (since Tiled 0.11)\n\n\nname:\n The name of the object. An arbitrary string.\n\n\ntype:\n The type of the object. An arbitrary string.\n\n\nx:\n The x coordinate of the object in pixels.\n\n\ny:\n The y coordinate of the object in pixels.\n\n\nwidth:\n The width of the object in pixels (defaults to 0).\n\n\nheight:\n The height of the object in pixels (defaults to 0).\n\n\nrotation:\n The rotation of the object in degrees clockwise (defaults to 0). (since 0.10)\n\n\ngid:\n An reference to a tile (optional).\n\n\nvisible:\n Whether the object is shown (1) or hidden (0). Defaults to 1. (since 0.9)\n\n\n\n\nWhile tile layers are very suitable for anything repetitive aligned to the tile grid, sometimes you want to annotate your map with other information, not necessarily aligned to the grid. Hence the objects have their coordinates and size in pixels, but you can still easily align that to the grid when you want to.\n\n\nYou generally use objects to add custom information to your tile map, such as spawn points, warps, exits, etc.\n\n\nWhen the object has a \ngid\n set, then it is represented by the image of the tile with that global ID. Currently that means \nwidth\n and \nheight\n are ignored for such objects. The image alignment currently depends on the map orientation. In orthogonal orientation it's aligned to the bottom-left while in isometric it's aligned to the bottom-center.\n\n\nCan contain: \nproperties\n, \nellipse\n (since 0.9), \npolygon\n, \npolyline\n, \nimage\n\n\nellipse\n\n\nUsed to mark an object as an ellipse. The existing \nx\n, \ny\n, \nwidth\n and \nheight\n attributes are used to determine the size of the ellipse.\n\n\npolygon\n\n\n\n\npoints:\n A list of x,y coordinates in pixels.\n\n\n\n\nEach \npolygon\n object is made up of a space-delimited list of x,y coordinates. The origin for these coordinates is the location of the parent \nobject\n. By default, the first point is created as 0,0 denoting that the point will originate exactly where the \nobject\n is placed.\n\n\npolyline\n\n\n\n\npoints:\n A list of x,y coordinates in pixels.\n\n\n\n\nA \npolyline\n follows the same placement definition as a \npolygon\n object.\n\n\nimagelayer\n\n\n\n\nname:\n The name of the image layer.\n\n\nx:\n The x position of the image layer in pixels.\n\n\ny:\n The y position of the image layer in pixels.\n\n\nwidth:\n The width of the image layer in tiles. Meaningless.\n\n\nheight:\n The height of the image layer in tiles. Meaningless.\n\n\nopacity:\n The opacity of the layer as a value from 0 to 1. Defaults to 1.\n\n\nvisible:\n Whether the layer is shown (1) or hidden (0). Defaults to 1.\n\n\n\n\nA layer consisting of a single image.\n\n\nCan contain: \nproperties\n, \nimage\n\n\nproperties\n\n\nCan contain: \nproperty\n\n\nWraps any number of custom properties. Can be used as a child of the \nmap\n, \ntile\n (when part of a \ntileset\n), \nlayer\n, \nobjectgroup\n and \nobject\n elements.\n\n\nproperty\n\n\n\n\nname:\n The name of the property.\n\n\nvalue:\n The value of the property.\n\n\n\n\nWhen the property spans contains newlines, the current versions of Tiled Java and Tiled Qt will write out the value as characters contained inside the \nproperty\n element rather than as the \nvalue\n attribute. However, it is at the moment not really possible to edit properties consisting of multiple lines with Tiled.\n\n\nIt is possible that a future version of the TMX format will switch to always saving property values inside the element rather than as an attribute.\n\n\n\n\n\n\nThe \nTMX Map Format\n by \nhttp://www.mapeditor.org\n is licensed under a \nCreative Commons Attribution-ShareAlike 3.0 Unported License\n.",
            "title": "TMX Map Format"
        },
        {
            "location": "/reference/tmx-map-format/#tmx-map-format",
            "text": "The TMX (Tile Map XML) map format used by  Tiled  is a flexible way to describe a tile based map. It can describe maps with any tile size, any amount of layers, any number of tile sets and it allows custom properties to be set on most elements. Beside tile layers, it can also contain groups of objects that can be placed freely.  Note that there are many  libraries and frameworks  available that can work with TMX maps.  In this document we'll go through each element found in this map format. The elements are mentioned in the headers and the list of attributes of the elements are listed right below, followed by a short explanation. Attributes or elements that are deprecated or unsupported by the current version of Tiled are formatted in italics.  Have a look at the  changelog  when you're interested in what changed between Tiled versions.  A DTD-file (Document Type Definition) is served at  http://mapeditor.org/dtd/1.0/map.dtd . This file is not up-to-date but might be useful for XML-namespacing anyway.",
            "title": "TMX Map Format"
        },
        {
            "location": "/reference/tmx-map-format/#map",
            "text": "version:  The TMX format version, generally 1.0.  orientation:  Map orientation. Tiled supports \"orthogonal\", \"isometric\" and \"staggered\" (since 0.9) at the moment.  width:  The map width in tiles.  height:  The map height in tiles.  tilewidth:  The width of a tile.  tileheight:  The height of a tile.  backgroundcolor:  The background color of the map. (since 0.9, optional)  renderorder:  The order in which tiles on tile layers are rendered. Valid values are  right-down  (the default),  right-up ,  left-down  and  left-up . In all cases, the map is drawn row-by-row. (since 0.10, but only supported for orthogonal maps at the moment)   The  tilewidth  and  tileheight  properties determine the general grid size of the map. The individual tiles may have different sizes. Larger tiles will extend at the top and right (anchored to the bottom left).  A map contains three different kinds of layers. Tile layers were once the only type, and are simply called  layer , object layers have the  objectgroup  tag and image layers use the  imagelayer  tag. The order in which these layers appear is the order in which the layers are rendered by Tiled.  Can contain:  properties ,  tileset ,  layer ,  objectgroup ,  imagelayer",
            "title": "&lt;map&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#tileset",
            "text": "firstgid:  The first global tile ID of this tileset (this global ID maps to the first tile in this tileset).  source:  If this tileset is stored in an external TSX (Tile Set XML) file, this attribute refers to that file. That TSX file has the same structure as the  tileset  element described here. (There is the  firstgid  attribute missing and this  source  attribute is also not there. These two attributes are kept in the TMX map, since they are map specific.)  name:  The name of this tileset.  tilewidth:  The (maximum) width of the tiles in this tileset.  tileheight:  The (maximum) height of the tiles in this tileset.  spacing:  The spacing in pixels between the tiles in this tileset (applies to the tileset image).  margin:  The margin around the tiles in this tileset (applies to the tileset image).   If there are multiple  tileset  elements, they are in ascending order of their  firstgid  attribute. The first tileset always has a  firstgid  value of 1 and it can be assumed that there are no gaps in the valid range of global tile IDs.  Can contain:  tileoffset  (since 0.8),  properties  (since 0.8),  image ,  terraintypes  (since 0.9),  tile  tileoffset   x:  Horizontal offset in pixels  y:  Vertical offset in pixels (positive is down)   This element is used to specify an offset in pixels, to be applied when drawing a tile from the related tileset. When not present, no offset is applied.  image   format:  Used for embedded images, in combination with a  data  child element. Valid values are file extensions like  png ,  gif ,  jpg ,  bmp , etc. (since 0.9)  id:  Used by some versions of Tiled Java. Deprecated and unsupported by Tiled Qt.  source:  The reference to the tileset image file (Tiled supports most common image formats).  trans:  Defines a specific color that is treated as transparent (example value: \"#FF00FF\" for magenta). Up until Tiled 0.12, this value is written out without a  #  but this is planned to change.  width:  The image width in pixels (optional, used for tile index correction when the image changes)  height:  The image height in pixels (optional)   Can contain:  data  (since 0.9)  terraintypes  This element defines an array of terrain types, which can be referenced from the  terrain  attribute of the  tile  element.  Can contain:  terrain  terrain   name:  The name of the terrain type.  tile:  The local tile-id of the tile that represents the terrain visually.   Can contain:  properties  tile   id:  The local tile ID within its tileset.  terrain:  Defines the terrain type of each corner of the tile, given as comma-separated indexes in the terrain types array in the order top-left, top-right, bottom-left, bottom-right. Leaving out a value means that corner has no terrain. (optional) (since 0.9)  probability:  A percentage indicating the probability that this tile is chosen when it competes with others while editing with the terrain tool. (optional) (since 0.9)   Can contain:  properties ,  image  (since 0.9),  objectgroup  (since 0.10),  animation  (since 0.10)  animation  Contains a list of animation frames.  As of Tiled 0.10, each tile can have exactly one animation associated with it. In the future, there could be support for multiple named animations on a tile.  Can contain:  frame  frame   tileid : The local ID of a tile within the parent  tileset .  duration : How long (in milliseconds) this frame should be displayed before advancing to the next frame.",
            "title": "&lt;tileset&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#layer",
            "text": "All  tileset  tags shall occur before the first  layer  tag so that parsers may rely on having the tilesets before needing to resolve tiles.   name:  The name of the layer.  x:  The x coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  y:  The y coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  width:  The width of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map width.  height:  The height of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map height.  opacity:  The opacity of the layer as a value from 0 to 1. Defaults to 1.  visible:  Whether the layer is shown (1) or hidden (0). Defaults to 1.   Can contain:  properties ,  data  data   encoding:  The encoding used to encode the tile layer data. When used, it can be \"base64\" and \"csv\" at the moment.  compression:  The compression used to compress the tile layer data. Tiled Qt supports \"gzip\" and \"zlib\".   When no encoding or compression is given, the tiles are stored as individual XML  tile  elements. Next to that, the easiest format to parse is the \"csv\" (comma separated values) format.  The base64-encoded and optionally compressed layer data is somewhat more complicated to parse. First you need to base64-decode it, then you may need to decompress it. Now you have an array of bytes, which should be interpreted as an array of unsigned 32-bit integers using little-endian byte ordering.  Whatever format you choose for your layer data, you will always end up with so called \"global tile IDs\" (gids). They are global, since they may refer to a tile from any of the tilesets used by the map. In order to find out from which tileset the tile is you need to find the tileset with the highest  firstgid  that is still lower or equal than the gid. The tilesets are always stored with increasing  firstgid s.  Can contain:  tile  Tile flipping  When you use the tile flipping feature added in Tiled Qt 0.7, the highest two bits of the gid store the flipped state. Bit 32 is used for storing whether the tile is horizontally flipped and bit 31 is used for the vertically flipped tiles. And since Tiled Qt 0.8, bit 30 means whether the tile is flipped (anti) diagonally, enabling tile rotation. These bits have to be read and cleared  before  you can find out which tileset a tile belongs to.  When rendering a tile, the order of operation matters. The diagonal flip (x/y axis swap) is done first, followed by the horizontal and vertical flips.  The following C++ pseudo-code should make it all clear:  // Bits on the far end of the 32-bit global tile ID are used for tile flags\nconst unsigned FLIPPED_HORIZONTALLY_FLAG = 0x80000000;\nconst unsigned FLIPPED_VERTICALLY_FLAG   = 0x40000000;\nconst unsigned FLIPPED_DIAGONALLY_FLAG   = 0x20000000;\n\n...\n\n// Extract the contents of the  data  element\nstring tile_data = ...\n\nunsigned char *data = decompress(base64_decode(tile_data));\nunsigned tile_index = 0;\n\n// Here you should check that the data has the right size\n// (map_width * map_height * 4)\n\nfor (int y = 0; y   map_height; ++y) {\n  for (int x = 0; x   map_width; ++x) {\n    unsigned global_tile_id = data[tile_index] |\n                              data[tile_index + 1]   8 |\n                              data[tile_index + 2]   16 |\n                              data[tile_index + 3]   24;\n    tile_index += 4;\n\n    // Read out the flags\n    bool flipped_horizontally = (global_tile_id   FLIPPED_HORIZONTALLY_FLAG);\n    bool flipped_vertically = (global_tile_id   FLIPPED_VERTICALLY_FLAG);\n    bool flipped_diagonally = (global_tile_id   FLIPPED_DIAGONALLY_FLAG);\n\n    // Clear the flags\n    global_tile_id  = ~(FLIPPED_HORIZONTALLY_FLAG |\n                        FLIPPED_VERTICALLY_FLAG |\n                        FLIPPED_DIAGONALLY_FLAG);\n\n    // Resolve the tile\n    for (int i = tileset_count - 1; i  = 0; --i) {\n      Tileset *tileset = tilesets[i];\n\n      if (tileset- first_gid()  = global_tile_id) {\n        tiles[y][x] = tileset- tileAt(global_tile_id - tileset- first_gid());\n        break;\n      }\n    }\n  }\n}  (Since the above code was put together on this wiki page and can't be directly tested, please make sure to report any errors you encounter when basing your parsing code on it, thanks.)  tile   gid:  The global tile ID.   Not to be confused with the  tile  element inside a  tileset , this element defines the value of a single tile on a tile layer. This is however the most inefficient way of storing the tile layer data, and should generally be avoided.",
            "title": "&lt;layer&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#objectgroup",
            "text": "name:  The name of the object group.  color:  The color used to display the objects in this group.  x:  The x coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  y:  The y coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  width:  The width of the object group in tiles. Meaningless.  height:  The height of the object group in tiles. Meaningless.  opacity:  The opacity of the layer as a value from 0 to 1. Defaults to 1.  visible:  Whether the layer is shown (1) or hidden (0). Defaults to 1.  draworder:  Whether the objects are drawn according to the order of appearance (\"index\") or sorted by their y-coordinate (\"topdown\"). Defaults to \"topdown\".   The object group is in fact a map layer, and is hence called \"object layer\" in Tiled Qt.  Can contain:  properties ,  object  object   id:  Unique ID of the object. Each object that is placed on a map gets a unique id. Even if an object was deleted, no object gets the same ID. Can not be changed in Tiled Qt. (since Tiled 0.11)  name:  The name of the object. An arbitrary string.  type:  The type of the object. An arbitrary string.  x:  The x coordinate of the object in pixels.  y:  The y coordinate of the object in pixels.  width:  The width of the object in pixels (defaults to 0).  height:  The height of the object in pixels (defaults to 0).  rotation:  The rotation of the object in degrees clockwise (defaults to 0). (since 0.10)  gid:  An reference to a tile (optional).  visible:  Whether the object is shown (1) or hidden (0). Defaults to 1. (since 0.9)   While tile layers are very suitable for anything repetitive aligned to the tile grid, sometimes you want to annotate your map with other information, not necessarily aligned to the grid. Hence the objects have their coordinates and size in pixels, but you can still easily align that to the grid when you want to.  You generally use objects to add custom information to your tile map, such as spawn points, warps, exits, etc.  When the object has a  gid  set, then it is represented by the image of the tile with that global ID. Currently that means  width  and  height  are ignored for such objects. The image alignment currently depends on the map orientation. In orthogonal orientation it's aligned to the bottom-left while in isometric it's aligned to the bottom-center.  Can contain:  properties ,  ellipse  (since 0.9),  polygon ,  polyline ,  image  ellipse  Used to mark an object as an ellipse. The existing  x ,  y ,  width  and  height  attributes are used to determine the size of the ellipse.  polygon   points:  A list of x,y coordinates in pixels.   Each  polygon  object is made up of a space-delimited list of x,y coordinates. The origin for these coordinates is the location of the parent  object . By default, the first point is created as 0,0 denoting that the point will originate exactly where the  object  is placed.  polyline   points:  A list of x,y coordinates in pixels.   A  polyline  follows the same placement definition as a  polygon  object.",
            "title": "&lt;objectgroup&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#imagelayer",
            "text": "name:  The name of the image layer.  x:  The x position of the image layer in pixels.  y:  The y position of the image layer in pixels.  width:  The width of the image layer in tiles. Meaningless.  height:  The height of the image layer in tiles. Meaningless.  opacity:  The opacity of the layer as a value from 0 to 1. Defaults to 1.  visible:  Whether the layer is shown (1) or hidden (0). Defaults to 1.   A layer consisting of a single image.  Can contain:  properties ,  image",
            "title": "&lt;imagelayer&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#properties",
            "text": "Can contain:  property  Wraps any number of custom properties. Can be used as a child of the  map ,  tile  (when part of a  tileset ),  layer ,  objectgroup  and  object  elements.  property   name:  The name of the property.  value:  The value of the property.   When the property spans contains newlines, the current versions of Tiled Java and Tiled Qt will write out the value as characters contained inside the  property  element rather than as the  value  attribute. However, it is at the moment not really possible to edit properties consisting of multiple lines with Tiled.  It is possible that a future version of the TMX format will switch to always saving property values inside the element rather than as an attribute.    The  TMX Map Format  by  http://www.mapeditor.org  is licensed under a  Creative Commons Attribution-ShareAlike 3.0 Unported License .",
            "title": "&lt;properties&gt;"
        },
        {
            "location": "/reference/tmx-changelog/",
            "text": "TMX Changelog\n\n\nBelow are described the changes/additions that were made to the \nTMX format\n for recent versions of Tiled.\n\n\nTiled 0.12\n\n\n\n\nPreviously tile objects never had \nwidth\n and \nheight\n properties, though the format technically allowed this. Now these properties are used to store the size the image should be rendered at. The default values for these attributes are the dimensions of the tile image.\n\n\n\n\nTiled 0.11\n\n\n\n\nAdded \nhexagonal\n to the supported values for the \norientation\n attribute on the \nmap\n element. This also adds \nstaggerindex\n (\neven\n or \nodd\n) and \nstaggerdirection\n (\nrows\n or \ncolumns\n) and \nhexsidelength\n (integer value) attributes to the \nmap\n element, in order to support the many variations of staggered hexagonal. The \nstaggerindex\n attribute is now also supported when using the \nstaggered\n map orientation.\n\n\nAdded an \nid\n attribute to the \nobject\n element, which stores a map-unique ID of the object.\n\n\n\n\nTiled 0.10\n\n\n\n\n\n\nTile objects can now be horizontally or vertically flipped. This is stored in the \ngid\n attribute using the same mechanism as for regular tiles. The image is expected to be flipped without affecting its position, same way as flipped tiles.\n\n\n\n\n\n\nObjects can be rotated freely. The rotation is stored in degrees as a \nrotation\n attribute, with positive rotation going clockwise.\n\n\n\n\n\n\nThe render order of the tiles on tile layers can be configured in a number of ways through a new \nrenderorder\n property on the \nmap\n element. Valid values are \nright-down\n (the default), \nright-up\n, \nleft-down\n and \nleft-up\n. In all cases, the map is drawn row-by-row. This is only supported for orthogonal maps at the moment.\n\n\n\n\n\n\nThe render order of objects on object layers can be configured to be either sorted by their y-coordinate (previous behavior and still the default) or simply the order of appearance in the map file. The latter enables manual control over the drawing order with actions that \"Raise\" and \"Lower\" selected objects. It is controlled by the \ndraworder\n property on the \nobjectgroup\n element, which can be either \ntopdown\n (default) or \nindex\n.\n\n\n\n\n\n\nTiles can have an \nobjectgroup\n child element, which can contain objects that define the collision shape to use for that tile. This information can be edited in the new Tile Collision Editor.\n\n\n\n\n\n\nTiles can have a single looping animation associated with them using an \nanimation\n child element. Each frame of the animation refers to a local tile ID from this tileset and defines the frame duration in milliseconds. Example:\n\n\n\n\n\n\ntileset ...\n\n    ...\n    \ntile id=\n[n]\n\n        \nanimation\n\n            \nframe tileid=\n0\n duration=\n100\n/\n\n            \nframe tileid=\n1\n duration=\n100\n/\n\n            \nframe tileid=\n2\n duration=\n100\n/\n\n        \n/animation\n\n    \n/tile\n\n\n/tileset\n\n\n\n\n\nTiled 0.9\n\n\n\n\nPer-object visibility flag is saved (defaults to 1):\n\n\n\n\nobject visible=\n0|1\n\n\n\n\n\n\n\nTerrain information was added to tileset definitions (this is generally not very relevant for games):\n\n\n\n\ntileset ...\n\n    ...\n    \nterraintypes\n\n        \nterrain name=\nName\n tile=\nlocal_id\n/\n\n    \n/terraintypes\n\n    \ntile id=\nlocal_id\n terrain=\n[n],[n],[n],[n]\n probability=\npercentage\n/\n\n    ...\n\n/tileset\n\n\n\n\n\n\n\n\n\nThere is preliminary support for a \"staggered\" (isometric) projection (new value for the \norientation\n attribute of the \nmap\n element).\n\n\n\n\n\n\nA basic image layer type was added:\n\n\n\n\n\n\nimagelayer ...\n\n    \nimage source=\n...\n/\n\n\n/imagelayer\n\n\n\n\n\n\n\nAdded ellipse object shape. Same parameters as rectangular objects, but marked as ellipse with a child element:\n\n\n\n\nobject ...\n\n    \nellipse/\n\n\n/object\n\n\n\n\n\n\n\nAdded map property for specifying the background color:\n\n\n\n\nmap ... backgroundcolor=\n#XXXXXX\n\n\n\n\n\n\n\nAdded initial (non-GUI) support for individual and/or embedded tile images (since there is no way to set this up in Tiled Qt but only in Tiled Java or with \npytmxlib\n, this is not very important to support at the moment):\n\n\n\n\ntileset ...\n\n    \ntile id=\n[n]\n\n        \n!-- an embedded image --\n\n        \nimage format=\npng\n\n            \ndata encoding=\nbase64\n\n                ...\n            \n/data\n\n        \n/image\n\n    \n/tile\n\n    \ntile id=\n[n]\n\n        \n!-- an individually referenced image for a single tile --\n\n        \nimage source=\nfile.png\n/\n\n    \n/tile\n\n    ...\n\n/tileset\n\n\n\n\n\nTiled 0.8\n\n\n\n\n\n\nTilesets can now have custom properties (using the \nproperties\n child element, just like everything else).\n\n\n\n\n\n\nTilesets now support defining a drawing offset in pixels, which is to be used when drawing any tiles from that tileset. Example:\n\n\n\n\n\n\ntileset name=\nperspective_walls\n tilewidth=\n64\n tileheight=\n64\n\n    \ntileoffset x=\n-32\n y=\n0\n/\n\n    ...\n\n/tileset\n\n\n\n\n\n\n\nSupport for tile rotation in 90-degree increments was added by using the third most significant bit in the global tile id. This new bit means \"anti-diagonal flip\", which swaps the x and y axis when rendering a tile.",
            "title": "TMX Changelog"
        },
        {
            "location": "/reference/tmx-changelog/#tmx-changelog",
            "text": "Below are described the changes/additions that were made to the  TMX format  for recent versions of Tiled.",
            "title": "TMX Changelog"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-012",
            "text": "Previously tile objects never had  width  and  height  properties, though the format technically allowed this. Now these properties are used to store the size the image should be rendered at. The default values for these attributes are the dimensions of the tile image.",
            "title": "Tiled 0.12"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-011",
            "text": "Added  hexagonal  to the supported values for the  orientation  attribute on the  map  element. This also adds  staggerindex  ( even  or  odd ) and  staggerdirection  ( rows  or  columns ) and  hexsidelength  (integer value) attributes to the  map  element, in order to support the many variations of staggered hexagonal. The  staggerindex  attribute is now also supported when using the  staggered  map orientation.  Added an  id  attribute to the  object  element, which stores a map-unique ID of the object.",
            "title": "Tiled 0.11"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-010",
            "text": "Tile objects can now be horizontally or vertically flipped. This is stored in the  gid  attribute using the same mechanism as for regular tiles. The image is expected to be flipped without affecting its position, same way as flipped tiles.    Objects can be rotated freely. The rotation is stored in degrees as a  rotation  attribute, with positive rotation going clockwise.    The render order of the tiles on tile layers can be configured in a number of ways through a new  renderorder  property on the  map  element. Valid values are  right-down  (the default),  right-up ,  left-down  and  left-up . In all cases, the map is drawn row-by-row. This is only supported for orthogonal maps at the moment.    The render order of objects on object layers can be configured to be either sorted by their y-coordinate (previous behavior and still the default) or simply the order of appearance in the map file. The latter enables manual control over the drawing order with actions that \"Raise\" and \"Lower\" selected objects. It is controlled by the  draworder  property on the  objectgroup  element, which can be either  topdown  (default) or  index .    Tiles can have an  objectgroup  child element, which can contain objects that define the collision shape to use for that tile. This information can be edited in the new Tile Collision Editor.    Tiles can have a single looping animation associated with them using an  animation  child element. Each frame of the animation refers to a local tile ID from this tileset and defines the frame duration in milliseconds. Example:    tileset ... \n    ...\n     tile id= [n] \n         animation \n             frame tileid= 0  duration= 100 / \n             frame tileid= 1  duration= 100 / \n             frame tileid= 2  duration= 100 / \n         /animation \n     /tile  /tileset",
            "title": "Tiled 0.10"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-09",
            "text": "Per-object visibility flag is saved (defaults to 1):   object visible= 0|1    Terrain information was added to tileset definitions (this is generally not very relevant for games):   tileset ... \n    ...\n     terraintypes \n         terrain name= Name  tile= local_id / \n     /terraintypes \n     tile id= local_id  terrain= [n],[n],[n],[n]  probability= percentage / \n    ... /tileset     There is preliminary support for a \"staggered\" (isometric) projection (new value for the  orientation  attribute of the  map  element).    A basic image layer type was added:    imagelayer ... \n     image source= ... /  /imagelayer    Added ellipse object shape. Same parameters as rectangular objects, but marked as ellipse with a child element:   object ... \n     ellipse/  /object    Added map property for specifying the background color:   map ... backgroundcolor= #XXXXXX    Added initial (non-GUI) support for individual and/or embedded tile images (since there is no way to set this up in Tiled Qt but only in Tiled Java or with  pytmxlib , this is not very important to support at the moment):   tileset ... \n     tile id= [n] \n         !-- an embedded image -- \n         image format= png \n             data encoding= base64 \n                ...\n             /data \n         /image \n     /tile \n     tile id= [n] \n         !-- an individually referenced image for a single tile -- \n         image source= file.png / \n     /tile \n    ... /tileset",
            "title": "Tiled 0.9"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-08",
            "text": "Tilesets can now have custom properties (using the  properties  child element, just like everything else).    Tilesets now support defining a drawing offset in pixels, which is to be used when drawing any tiles from that tileset. Example:    tileset name= perspective_walls  tilewidth= 64  tileheight= 64 \n     tileoffset x= -32  y= 0 / \n    ... /tileset    Support for tile rotation in 90-degree increments was added by using the third most significant bit in the global tile id. This new bit means \"anti-diagonal flip\", which swaps the x and y axis when rendering a tile.",
            "title": "Tiled 0.8"
        },
        {
            "location": "/reference/support-for-tmx-maps/",
            "text": "Libraries and Frameworks\n\n\nThere are many libraries available for reading and/or writing maps stored in\nthe \nTMX map format\n as well as many development\nframeworks that include support for TMX maps. This list is divided into two\nsections:\n\n\n\n\nSupport by Language\n\n\nSupport by Framework\n\n\n\n\nFirst list is for developers who plan on implementing their own renderer. Second list is for developers already using (or considering) a particular game engine / graphics library who would rather pass on having to write their own tilemap renderer.\n\n\nFor updates to this page please open a pull request or issue \non github\n, thanks!\n\n\nSupport by Language\n\n\nThese libraries typically include only a TMX parser, but no rendering support. They can be used universally and should not require a specific game engine or graphics library.\n\n\nC\n\n\n\n\nTMX\n - XML and JSON map loader with Allegro5 and SDL2 examples (BSD).\n\n\n\n\nC++\n\n\n\n\nC++/Boost\n by Tomas Andrle (limited functionality, single cpp file)\n\n\nC++/TinyXML based tmx-parser\n (BSD)\n\n\nOriginal version\n by KonoM is discontinued.\n\n\nC++/Qt based libtiled, used by Tiled itself and included at \nsrc/libtiled\n (BSD)\n\n\nC++11x/TinyXml2 libtmx-parser\n by halsafar. (zlib/tinyxml2)\n\n\nC++11/TinyXml2 libtmx\n by jube, for reading only (ISC licence). See \ndocumentation\n.\n\n\nTMXParser\n General *.tmx tileset data loader. Intended to be used with TSXParser for external tileset loading. (No internal tileset support)\n\n\nTSXParser\n General *.tsx tileset data loader. Intended to be used with TMXParser.\n\n\n\n\nC#/.NET\n\n\n\n\nXNA map loader\n by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave (has dependency on XNA but supposedly can be turned into a standalone parser easily)\n\n\nTiledSharp\n: Yet another C# TMX importer library, with Tiled 0.11 support. TiledSharp is a generic parser which can be used in any framework, but it cannot be used to render the maps. Available via NuGet.\n\n\nNTiled\n: Generic parser for 0.9.1 tiled maps. Available via NuGet.\n\n\nTmxCSharp\n: Useful for multi-layer orthographic tile engines. No framework dependencies, used with a custom OpenTK tile engine soon to be open source, tested with Tiled 0.8.1 (multiple output formats). MIT license.\n\n\ntmx-mapper-pcl\n: PCL library for parsing Tiled map TMX files. This library could be used with MonoGame and Windows Runtime Universal apps.\n\n\n\n\nD\n\n\n\n\ntiledMap.d\n simple single-layer and single-tileset example to load a map and its tileset in \nD language\n. It also contains basic rendering logic using \nDSFML\n\n\n\n\nGo\n\n\n\n\ngithub.com/salviati/go-tmx/tmx\n\n\n\n\nHaskell\n\n\n\n\nhtiled\n by \nChristian R\u00f8dli Amble\n.\n\n\n\n\nJava\n\n\n\n\nA library for loading TMX files is included with Tiled at \nutil/java/libtiled-java\n.\n\n\nAndroid-Specific:\n\n\nAndroidTMXLoader\n loads TMX data into an object and renders to an Android Bitmap (limited functionality)\n\n\nlibtiled-java port\n is a port of the libtiled-java to be used on Android phones.\n\n\n\n\n\n\n\n\nObjective-C \n Swift\n\n\n\n\nTilemapKit\n is an actively maintained TMX loader and hierarchical tilemap object model for use with iOS projects. Can be integrated with any C/C++/Objective-C/Swift codebase and used for custom renderers.\n\n\n\n\nPHP\n\n\n\n\nPHP TMX Viewer\n by sebbu : render the map as an image (allow some modifications as well)\n\n\n\n\nPike\n\n\n\n\nTMX parser\n: a simple loader for TMX maps (CSV format only).\n\n\n\n\nPython\n\n\n\n\npytmxlib\n: library for programmatic manipulation of TMX maps\n\n\npython-tmx\n: a simple library for reading and writing TMX files.\n\n\n\n\nRuby\n\n\n\n\ntmx gem\n by erisdiscord\n\n\n\n\nVala\n\n\n\n\nlibrpg\n A library to load and handle spritesets (own format) and orthogonal TMX maps.\n\n\n\n\nSupport by Framework\n\n\nFollowing entries are integrated solutions for specific game engines. They are typically of little to no use if you're not using said game engine.\n\n\nAndEngine\n\n\n\n\nAndEngine\n by Nicolas Gramlich supports \nrendering TMX maps\n\n\n\n\nAllegro\n\n\n\n\nallegro_tiled\n integrates Tiled support with \nAllegro 5\n.\n\n\n\n\ncocos2d\n\n\n\n\ncocos2d (Python)\n supports loading \nTiled maps\n through its \ncocos.tiles\n module.\n\n\ncocos2d-x (C++)\n supports loading TMX maps through the \nCCTMXTiledMap\n class.\n\n\ncocos2d-objc (Objective-C, Swift)\n (previously known as: cocos2d-iphone, cocos2d-swift, cocos2d-spritebuilder) supports loading TMX maps through \nCCTiledMap\n\n\nTilemapKit\n is an actively maintained tilemapping framework for Cocos2D. It supports all TMX tilemap types, including staggered iso and all hex variations.\n\n\n\n\nConstruct 2 - Scirra\n\n\n\n\nConstruct 2\n, since the Beta Release 149, officially supports TMX maps, and importing it by simple dragging the file inside the editor. \nOfficial Note\n\n\n\n\nCorona SDK\n\n\n\n\nLime\n is a 2D engine for making tile-based games with Corona SDK and Tiled\n\n\n\n\nFlixel\n\n\n\n\nLithander demonstrated his \nFlash TMX parser combined with Flixel rendering\n\n\n\n\nGame Maker\n\n\n\n\nTiled2GM Converter\n by Dmi7ry\n\n\n\n\nHaxe\n\n\n\n\nHaxePunk\n Tiled Loader for HaxePunk\n\n\nHaxeFlixel\n\n\nOpenFL\n \"openfl-tiled\" is a library, which gives OpenFL developers the ability to use the Tiled Map Editor.\n\n\nOpenFL + Tiled + Flixel\n Experimental glue to use \"openfl-tiled\" with HaxeFlixel\n\n\n\n\nHTML5 (multiple engines)\n\n\n\n\nCanvas Engine\n A framework to create video games in HTML5 Canvas\n\n\nchesterGL\n A simple WebGL/canvas game library\n\n\nKineticJs-Ext\n A multi-canvas based game rendering library\n\n\nmelonJS\n A lightweight HTML5 game engine\n\n\nPlatypus Engine\n A robust orthogonal tile game engine with game entity library.\n\n\nsprite.js\n A game framework for image sprites.\n\n\nTMXjs\n A JavaScript, jQuery and RequireJS-based TMX (Tile Map XML) parser and renderer.\n\n\nchem-tmx\n Plugin for \nchem\n game engine.\n\n\nGameJs\n JavaScript library for game programming; a thin wrapper to draw on HTML5 canvas and other useful modules for game development\n\n\nCrafty\n JavaScript HTML5 Game Engine; supports loading Tiled maps through an external component \nTiledMapBuilder\n.\n\n\nPhaser\n A fast, free and fun open source framework supporting both JavaScript and TypeScript (\nTiled tutorial\n)\n\n\n\n\nindielib-crossplatform\n\n\n\n\nindielib cross-platform\n supports loading TMX maps through the \nC++/TinyXML based tmx-parser\n by KonoM (BSD)\n\n\n\n\nLibGDX\n\n\n\n\nlibgdx\n, a Java-based Android/desktop/HTML5 game library, \nprovides\n a packer, loader and renderer for TMX maps\n\n\n\n\nL\u00d6VE\n\n\n\n\nSimple Tiled Implementation\n Lua loader for the L\u00d6VE (Love2d) game framework.\n\n\n\n\nMOAI SDK\n\n\n\n\nHanappe\n Framework for MOAI SDK.\n\n\nRapanui\n Framework for MOAI SDK.\n\n\n\n\nMonkey X\n\n\n\n\nbit.tiled\n Loads TMX file as objects. Aims to be fully compatible with native TMX files.\n\n\nDiddy\n is an extensive framework for Monkey X that contains a module for loading and rendering TMX files.  Supports orthogonal and isometric maps as both CSV and Base64 (uncompressed).\n\n\n\n\nNode.js\n\n\n\n\nnode-tmx-parser\n - loads the TMX file into a JavaScript object\n\n\n\n\nPygame\n\n\n\n\nPygame map loader\n by dr0id\n\n\nPyTMX\n by Leif Theden (bitcraft)\n\n\ntmx.py\n by Richard Jones, from his \n2012 PyCon 'Introduction to Game Development' talk\n.\n\n\nTMX\n, a fork of tmx.py and a port to Python3.  A demo called pylletTown can be found \nhere\n.\n\n\n\n\nPyglet\n\n\n\n\nJSON map loader/renderer for pyglet\n by Juan J. Mart\u00ednez (reidrac)\n\n\nPyTMX\n by Leif Theden (bitcraft)\n\n\n\n\nPySDL2\n\n\n\n\nPyTMX\n by Leif Theden (bitcraft)\n\n\n\n\nSDL\n\n\n\n\nC++/TinyXML/SDL based loader\n example by Rohin Knight (limited functionality)\n\n\n\n\nSFML\n\n\n\n\nSTP\n (SFML TMX Parser) by edoren\n\n\nC++/SFML Tiled map loader\n by fallahn. (Zlib/libpng)\n\n\nC++/SfTileEngine\n by Tresky (currently limited functionality)\n\n\n\n\nSlick2D\n\n\n\n\nSlick2D\n supports loading TMX maps through \nTiledMap\n.\n\n\n\n\nSprite Kit Framework\n\n\n\n\nTilemapKit\n is an actively maintained tilemapping framework for Sprite Kit. It supports all TMX tilemap types, including staggered iso and all hex variations.\n\n\nJSTileMap\n is a lightweight SpriteKit implementation of the TMX format supporting iOS 7 and OS X 10.9 and above.\n\n\n\n\nTERRA Engine (Delphi/Pascal)\n\n\n\n\nTERRA Engine\n supports loading and rendering of TMX maps.\n\n\n\n\nUnity 3D\n\n\n\n\nOrthello Pro\n (2D framework) offers \nTiled map support\n.\n\n\nTiled Tilemaps\n library by Karnak Games adds support for Orthogonal TMX maps to Unity, with automatic collision detection.\n\n\nTiled To Unity\n is a 3D pipeline for Tiled maps. It uses prefabs as tiles, and can place decorations dynamically on tiles. Supports multiple layers (including object layers).\n\n\nTiled2Unity\n exports TMX files to Unity with support for (non-simple) collisions.\n\n\nUniTMX\n imports TMX files into a mesh.\n\n\nX-UniTMX\n supports almost all Tiled 0.10 features. Imports TMX/XML files into Sprite Objects or Meshes.\n\n\n\n\nUnreal Engine 4\n\n\n\n\nPaper2D\n provides built-in support for tile maps and tile sets, importing JSON exported from Tiled.\n\n\n\n\nUrho3D\n\n\n\n\nUrho3D\n natively supports loading Tiled maps as part of the \nUrho2D\n sublibrary (\nDocumentation\n, \nHTML5 example\n).\n\n\n\n\nXNA\n\n\n\n\nFlatRedBall Engine TMXGlue tool\n by Domenic Datti loads TMX maps into the FlatRedBall engine, complete with node networks, pathfinding, and shapecollection support via object layers.\n\n\nTiledMax\n by Aimee Bailey, a .NET library for parsing TMX maps without dependencies on Windows or XNA\n\n\nXTiled\n by Michael C. Neel and Dylan Wolf, XNA library for loading and rendering TMX maps\n\n\nXNA map loader\n by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave",
            "title": "Libraries and Frameworks"
        },
        {
            "location": "/reference/support-for-tmx-maps/#libraries-and-frameworks",
            "text": "There are many libraries available for reading and/or writing maps stored in\nthe  TMX map format  as well as many development\nframeworks that include support for TMX maps. This list is divided into two\nsections:   Support by Language  Support by Framework   First list is for developers who plan on implementing their own renderer. Second list is for developers already using (or considering) a particular game engine / graphics library who would rather pass on having to write their own tilemap renderer.  For updates to this page please open a pull request or issue  on github , thanks!",
            "title": "Libraries and Frameworks"
        },
        {
            "location": "/reference/support-for-tmx-maps/#support-by-language",
            "text": "These libraries typically include only a TMX parser, but no rendering support. They can be used universally and should not require a specific game engine or graphics library.  C   TMX  - XML and JSON map loader with Allegro5 and SDL2 examples (BSD).   C++   C++/Boost  by Tomas Andrle (limited functionality, single cpp file)  C++/TinyXML based tmx-parser  (BSD)  Original version  by KonoM is discontinued.  C++/Qt based libtiled, used by Tiled itself and included at  src/libtiled  (BSD)  C++11x/TinyXml2 libtmx-parser  by halsafar. (zlib/tinyxml2)  C++11/TinyXml2 libtmx  by jube, for reading only (ISC licence). See  documentation .  TMXParser  General *.tmx tileset data loader. Intended to be used with TSXParser for external tileset loading. (No internal tileset support)  TSXParser  General *.tsx tileset data loader. Intended to be used with TMXParser.   C#/.NET   XNA map loader  by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave (has dependency on XNA but supposedly can be turned into a standalone parser easily)  TiledSharp : Yet another C# TMX importer library, with Tiled 0.11 support. TiledSharp is a generic parser which can be used in any framework, but it cannot be used to render the maps. Available via NuGet.  NTiled : Generic parser for 0.9.1 tiled maps. Available via NuGet.  TmxCSharp : Useful for multi-layer orthographic tile engines. No framework dependencies, used with a custom OpenTK tile engine soon to be open source, tested with Tiled 0.8.1 (multiple output formats). MIT license.  tmx-mapper-pcl : PCL library for parsing Tiled map TMX files. This library could be used with MonoGame and Windows Runtime Universal apps.   D   tiledMap.d  simple single-layer and single-tileset example to load a map and its tileset in  D language . It also contains basic rendering logic using  DSFML   Go   github.com/salviati/go-tmx/tmx   Haskell   htiled  by  Christian R\u00f8dli Amble .   Java   A library for loading TMX files is included with Tiled at  util/java/libtiled-java .  Android-Specific:  AndroidTMXLoader  loads TMX data into an object and renders to an Android Bitmap (limited functionality)  libtiled-java port  is a port of the libtiled-java to be used on Android phones.     Objective-C   Swift   TilemapKit  is an actively maintained TMX loader and hierarchical tilemap object model for use with iOS projects. Can be integrated with any C/C++/Objective-C/Swift codebase and used for custom renderers.   PHP   PHP TMX Viewer  by sebbu : render the map as an image (allow some modifications as well)   Pike   TMX parser : a simple loader for TMX maps (CSV format only).   Python   pytmxlib : library for programmatic manipulation of TMX maps  python-tmx : a simple library for reading and writing TMX files.   Ruby   tmx gem  by erisdiscord   Vala   librpg  A library to load and handle spritesets (own format) and orthogonal TMX maps.",
            "title": "Support by Language"
        },
        {
            "location": "/reference/support-for-tmx-maps/#support-by-framework",
            "text": "Following entries are integrated solutions for specific game engines. They are typically of little to no use if you're not using said game engine.  AndEngine   AndEngine  by Nicolas Gramlich supports  rendering TMX maps   Allegro   allegro_tiled  integrates Tiled support with  Allegro 5 .   cocos2d   cocos2d (Python)  supports loading  Tiled maps  through its  cocos.tiles  module.  cocos2d-x (C++)  supports loading TMX maps through the  CCTMXTiledMap  class.  cocos2d-objc (Objective-C, Swift)  (previously known as: cocos2d-iphone, cocos2d-swift, cocos2d-spritebuilder) supports loading TMX maps through  CCTiledMap  TilemapKit  is an actively maintained tilemapping framework for Cocos2D. It supports all TMX tilemap types, including staggered iso and all hex variations.   Construct 2 - Scirra   Construct 2 , since the Beta Release 149, officially supports TMX maps, and importing it by simple dragging the file inside the editor.  Official Note   Corona SDK   Lime  is a 2D engine for making tile-based games with Corona SDK and Tiled   Flixel   Lithander demonstrated his  Flash TMX parser combined with Flixel rendering   Game Maker   Tiled2GM Converter  by Dmi7ry   Haxe   HaxePunk  Tiled Loader for HaxePunk  HaxeFlixel  OpenFL  \"openfl-tiled\" is a library, which gives OpenFL developers the ability to use the Tiled Map Editor.  OpenFL + Tiled + Flixel  Experimental glue to use \"openfl-tiled\" with HaxeFlixel   HTML5 (multiple engines)   Canvas Engine  A framework to create video games in HTML5 Canvas  chesterGL  A simple WebGL/canvas game library  KineticJs-Ext  A multi-canvas based game rendering library  melonJS  A lightweight HTML5 game engine  Platypus Engine  A robust orthogonal tile game engine with game entity library.  sprite.js  A game framework for image sprites.  TMXjs  A JavaScript, jQuery and RequireJS-based TMX (Tile Map XML) parser and renderer.  chem-tmx  Plugin for  chem  game engine.  GameJs  JavaScript library for game programming; a thin wrapper to draw on HTML5 canvas and other useful modules for game development  Crafty  JavaScript HTML5 Game Engine; supports loading Tiled maps through an external component  TiledMapBuilder .  Phaser  A fast, free and fun open source framework supporting both JavaScript and TypeScript ( Tiled tutorial )   indielib-crossplatform   indielib cross-platform  supports loading TMX maps through the  C++/TinyXML based tmx-parser  by KonoM (BSD)   LibGDX   libgdx , a Java-based Android/desktop/HTML5 game library,  provides  a packer, loader and renderer for TMX maps   L\u00d6VE   Simple Tiled Implementation  Lua loader for the L\u00d6VE (Love2d) game framework.   MOAI SDK   Hanappe  Framework for MOAI SDK.  Rapanui  Framework for MOAI SDK.   Monkey X   bit.tiled  Loads TMX file as objects. Aims to be fully compatible with native TMX files.  Diddy  is an extensive framework for Monkey X that contains a module for loading and rendering TMX files.  Supports orthogonal and isometric maps as both CSV and Base64 (uncompressed).   Node.js   node-tmx-parser  - loads the TMX file into a JavaScript object   Pygame   Pygame map loader  by dr0id  PyTMX  by Leif Theden (bitcraft)  tmx.py  by Richard Jones, from his  2012 PyCon 'Introduction to Game Development' talk .  TMX , a fork of tmx.py and a port to Python3.  A demo called pylletTown can be found  here .   Pyglet   JSON map loader/renderer for pyglet  by Juan J. Mart\u00ednez (reidrac)  PyTMX  by Leif Theden (bitcraft)   PySDL2   PyTMX  by Leif Theden (bitcraft)   SDL   C++/TinyXML/SDL based loader  example by Rohin Knight (limited functionality)   SFML   STP  (SFML TMX Parser) by edoren  C++/SFML Tiled map loader  by fallahn. (Zlib/libpng)  C++/SfTileEngine  by Tresky (currently limited functionality)   Slick2D   Slick2D  supports loading TMX maps through  TiledMap .   Sprite Kit Framework   TilemapKit  is an actively maintained tilemapping framework for Sprite Kit. It supports all TMX tilemap types, including staggered iso and all hex variations.  JSTileMap  is a lightweight SpriteKit implementation of the TMX format supporting iOS 7 and OS X 10.9 and above.   TERRA Engine (Delphi/Pascal)   TERRA Engine  supports loading and rendering of TMX maps.   Unity 3D   Orthello Pro  (2D framework) offers  Tiled map support .  Tiled Tilemaps  library by Karnak Games adds support for Orthogonal TMX maps to Unity, with automatic collision detection.  Tiled To Unity  is a 3D pipeline for Tiled maps. It uses prefabs as tiles, and can place decorations dynamically on tiles. Supports multiple layers (including object layers).  Tiled2Unity  exports TMX files to Unity with support for (non-simple) collisions.  UniTMX  imports TMX files into a mesh.  X-UniTMX  supports almost all Tiled 0.10 features. Imports TMX/XML files into Sprite Objects or Meshes.   Unreal Engine 4   Paper2D  provides built-in support for tile maps and tile sets, importing JSON exported from Tiled.   Urho3D   Urho3D  natively supports loading Tiled maps as part of the  Urho2D  sublibrary ( Documentation ,  HTML5 example ).   XNA   FlatRedBall Engine TMXGlue tool  by Domenic Datti loads TMX maps into the FlatRedBall engine, complete with node networks, pathfinding, and shapecollection support via object layers.  TiledMax  by Aimee Bailey, a .NET library for parsing TMX maps without dependencies on Windows or XNA  XTiled  by Michael C. Neel and Dylan Wolf, XNA library for loading and rendering TMX maps  XNA map loader  by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave",
            "title": "Support by Framework"
        }
    ]
}