{
    "docs": [
        {
            "location": "/",
            "text": "Tiled Documentation\n\u00b6\n\n\nWelcome to the documentation pages for \nTiled\n, a\nflexible tile map editor! Here you will find the\n\nTiled User Manual\n and the\n\nTMX Map Format\n reference.\n\n\nIf you're not finding what you're looking for in these pages, please don't\nhesitate to ask questions on the \nTiled Forum\n.\n\n\nThis documentation is currently work-in-progress. Initially the relevant pages\nfrom the wiki have been ported over, providing a limited amount of\ndocumentation for specific Tiled features. Over time, this should become the\nplace to refer to for any details about using Tiled.\n\n\nIndex\n\u00b6\n\n\nTiled User Manual\n\u00b6\n\n\n\n\nIntroduction\n\n\nWorking with Layers\n\n\nEditing Tile Layers\n\n\nCustom Properties\n\n\nUsing the Terrain Tool\n\n\nUsing Commands\n\n\nKeyboard Shortcuts\n\n\n\n\nReference\n\u00b6\n\n\n\n\nTMX Map Format\n\n\nTMX Changelog\n\n\nLibraries and Frameworks",
            "title": "Index"
        },
        {
            "location": "/#tiled-documentation",
            "text": "Welcome to the documentation pages for  Tiled , a\nflexible tile map editor! Here you will find the Tiled User Manual  and the TMX Map Format  reference.  If you're not finding what you're looking for in these pages, please don't\nhesitate to ask questions on the  Tiled Forum .  This documentation is currently work-in-progress. Initially the relevant pages\nfrom the wiki have been ported over, providing a limited amount of\ndocumentation for specific Tiled features. Over time, this should become the\nplace to refer to for any details about using Tiled.",
            "title": "Tiled Documentation"
        },
        {
            "location": "/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/#tiled-user-manual",
            "text": "Introduction  Working with Layers  Editing Tile Layers  Custom Properties  Using the Terrain Tool  Using Commands  Keyboard Shortcuts",
            "title": "Tiled User Manual"
        },
        {
            "location": "/#reference",
            "text": "TMX Map Format  TMX Changelog  Libraries and Frameworks",
            "title": "Reference"
        },
        {
            "location": "/manual/introduction/",
            "text": "Introduction\n\u00b6\n\n\nAbout Tiled\n\u00b6\n\n\nTiled is a 2D level editor that helps you develop the content of your game. Its primary feature is to edit tile maps of various forms, but it also supports free image placement as well as powerful ways to annotate your level with extra information used by the game. Tiled focuses on general flexiblity while trying to stay intuitive.\n\n\nIn terms of tile maps, it supports straight rectangular tile layers, but also projected isometric, staggered isometric and staggered hexagonal layers. A tileset can be either a single image containing many tiles, or it can be a collection of individual images. In order to support certain depth faking techniques, tiles and layers can be offset by a custom distance and their rendering order can be configured.\n\n\nThe primary tool for editing tile layers is a stamp brush that allows efficient painting and copying of tile areas. It also supports drawing lines and circles. In addition, there are several selection tools and a tool that does \nautomatic terrain transitions\n. Finally, it can apply changes based on \npattern-matching\n to automate parts of your work.\n\n\nTiled also supports object layers, which traditionally were only for annotating your map with information but more recently they can also be used to place images. You can add rectangle, ellipse, polygon, polyline and tile objects. Object placement is not limited to the tile grid and objects can also be scaled or rotated. Object layers offer a lot of flexibility to add almost any information to your level that your game needs.\n\n\nOther things worth mentioning are the support for adding custom map or tileset formats through plugins, the tile stamp memory, tile animation support and the tile collision editor.\n\n\nGetting Started\n\u00b6\n\n\nCreating a New Map\n\u00b6\n\n\nWhen launching Tiled for the first time, we are greeted with the following default window layout:\n\n\n\n\nThere is a large gray area in the middle because no map is open yet. The first thing we'll do is to start a new map with \nFile -> New...\n (\nCtrl+N\n). The following dialog will pop up:\n\n\n\n\nHere, we choose the initial map size, tile size, orientation, tile layer format and tile render order (only supported for \nOrthogonal\n maps). All of these things can be changed later as needed, so it's not important to get it all right the first time.\n\n\nAfter pressing \nOK\n, we'll see the tile grid and an initial tile layer will be added to the map. However, before we can start using any tiles we need to add a tileset. Choose \nMap -> New Tileset...\n to open the New Tileset dialog:\n\n\n\n\nClick the \nBrowse...\n button and select the \ntmw_desert_spacing.png\n tileset from the examples shipping with Tiled (or use one of your own if you wish). This example tileset uses a tile size of 32x32. It also has a one pixel \nmargin\n around the tiles and a one pixel \nspacing\n in between the tiles (this is pretty rare actually, usually you should leave these values on 0).\n\n\nAfter pressing \nOK\n, Tiled should look as follows:\n\n\n\n\nWe're ready to select some tiles and \nstart painting\n!\nBut first, let's have a quick look at the \nvarious layer types\n\nsupported by Tiled.\n\n\nMost of the manual still needs to be written. Fortunately, there is a very nice \nTiled Map Editor Tutorial Series\n on GamesFromScratch.com. In addition, the support for Tiled in various \nengines and frameworks\n often comes with some usage information.",
            "title": "Introduction"
        },
        {
            "location": "/manual/introduction/#introduction",
            "text": "",
            "title": "Introduction"
        },
        {
            "location": "/manual/introduction/#about-tiled",
            "text": "Tiled is a 2D level editor that helps you develop the content of your game. Its primary feature is to edit tile maps of various forms, but it also supports free image placement as well as powerful ways to annotate your level with extra information used by the game. Tiled focuses on general flexiblity while trying to stay intuitive.  In terms of tile maps, it supports straight rectangular tile layers, but also projected isometric, staggered isometric and staggered hexagonal layers. A tileset can be either a single image containing many tiles, or it can be a collection of individual images. In order to support certain depth faking techniques, tiles and layers can be offset by a custom distance and their rendering order can be configured.  The primary tool for editing tile layers is a stamp brush that allows efficient painting and copying of tile areas. It also supports drawing lines and circles. In addition, there are several selection tools and a tool that does  automatic terrain transitions . Finally, it can apply changes based on  pattern-matching  to automate parts of your work.  Tiled also supports object layers, which traditionally were only for annotating your map with information but more recently they can also be used to place images. You can add rectangle, ellipse, polygon, polyline and tile objects. Object placement is not limited to the tile grid and objects can also be scaled or rotated. Object layers offer a lot of flexibility to add almost any information to your level that your game needs.  Other things worth mentioning are the support for adding custom map or tileset formats through plugins, the tile stamp memory, tile animation support and the tile collision editor.",
            "title": "About Tiled"
        },
        {
            "location": "/manual/introduction/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/manual/introduction/#creating-a-new-map",
            "text": "When launching Tiled for the first time, we are greeted with the following default window layout:   There is a large gray area in the middle because no map is open yet. The first thing we'll do is to start a new map with  File -> New...  ( Ctrl+N ). The following dialog will pop up:   Here, we choose the initial map size, tile size, orientation, tile layer format and tile render order (only supported for  Orthogonal  maps). All of these things can be changed later as needed, so it's not important to get it all right the first time.  After pressing  OK , we'll see the tile grid and an initial tile layer will be added to the map. However, before we can start using any tiles we need to add a tileset. Choose  Map -> New Tileset...  to open the New Tileset dialog:   Click the  Browse...  button and select the  tmw_desert_spacing.png  tileset from the examples shipping with Tiled (or use one of your own if you wish). This example tileset uses a tile size of 32x32. It also has a one pixel  margin  around the tiles and a one pixel  spacing  in between the tiles (this is pretty rare actually, usually you should leave these values on 0).  After pressing  OK , Tiled should look as follows:   We're ready to select some tiles and  start painting !\nBut first, let's have a quick look at the  various layer types \nsupported by Tiled.  Most of the manual still needs to be written. Fortunately, there is a very nice  Tiled Map Editor Tutorial Series  on GamesFromScratch.com. In addition, the support for Tiled in various  engines and frameworks  often comes with some usage information.",
            "title": "Creating a New Map"
        },
        {
            "location": "/manual/layers/",
            "text": "Working with Layers\n\u00b6\n\n\nA Tiled map supports various sorts of content, and this content is organized\ninto various different layers. The most common layers are the\n\nTile Layer\n and the \nObject Layer\n. There is\nalso an \nImage Layer\n for including simple foreground or\nbackground graphics. The order of the layers determines the rendering order of\nyour content.\n\n\nLayers can be hidden or made only partially visible. Layers also have an offset,\nwhich can be used to position them independently of each other, for example to\nfake depth.\n\n\nYou use \nGroup Layers\n to organize the layers into a hierarchy.\nThis makes it more comfortable to work with a large amount of layers.\n\n\nTile Layers\n\u00b6\n\n\nTile layers provide an efficient way of storing a large area filled with tile\ndata. The data is a simple array of tile references and as such no additional\ninformation can be stored for each location. The only extra information stored\nare a few flags, that allow tile graphics to be flipped vertically, horizontally\nor anti-diagonally (to support rotation in 90-degree increments).\n\n\nThe information needed to render each tile layer is stored with the map, which\nspecifies the position and rendering order of the tiles based on the orientation\nand various other properties.\n\n\nDespite only being able to refer to tiles, tile layers can also be useful for\ndefining various bits of non-graphical information in your level. Collision\ninformation can often be conveyed using a special tileset, and any kind of\nobject that does not need custom properties and is always aligned to the grid\ncan also be placed on a tile layer.\n\n\nObject Layers\n\u00b6\n\n\nObject layers are useful because they can store many kinds of information that\nwould not fit in a tile layer. Objects can be freely positioned, resized and\nrotated. They can also have individual custom properties. There are many kinds\nof objects:\n\n\n\n\nRectangle\n - for marking custom rectangular areas\n\n\nEllipse\n - for marking custom ellipse or circular areas\n\n\nPolygon\n - for when a rectangle or ellipse doesn't cut it (often a\n  collision area)\n\n\nPolyline\n - can be a path to follow or a wall to collide with\n\n\nTile\n - for freely placing, scaling and rotating your tile graphics\n\n\nText\n - for custom text or notes (since Tiled 1.0)\n\n\n\n\nAll objects can be named, in which case their name will show up in a label above\nthem (by default only for selected objects). Objects can also be given a \ntype\n,\nwhich is useful since it can be used to customize the color of their label and\nthe available \ncustom properties\n\nfor this object type. For tile objects, the type can be \ninherited from their\ntile\n.\n\n\nFor most map types, objects are positioned in plain pixels. The only exception\nto this are isometric maps (not isometric staggered). For isometric maps, it was\ndeamed useful to store their positions in a projected coordinate space. For\nthis, the isometric tiles are assumed to represent projected squares with both\nsides equal to the \ntile height\n. If you're using a different coordinate space\nfor objects in your isometric game, you'll need to convert these coordinates\naccordingly.\n\n\nThe object width and height is also mostly stored in pixels. For isometric maps,\nall shape objects (rectangle, ellipse, polygon and polyline) are projected into\nthe same coordinate space described above. This is based on the assumption that\nthese objects are generally used to mark areas on the map.\n\n\nImage Layers\n\u00b6\n\n\nImage layers provide a way to quickly include a single image as foreground or\nbackground of your map. They are currently not so useful, because if you instead\nadd the image as a Tileset and place it as a Tile Object, you gain the ability\nto freely scale and rotate the image.\n\n\nThe only advantage of using an image layer is that it avoids selecting /\ndragging the image while using the Select Objects tool, which is mainly due to\nthe lack of layer locking (\n#734\n).\n\n\nNew in Tiled 1.0\n\n\n\nGroup Layers\n\u00b6\n\n\nGroup layers work like folders and can be used for organizing the layers into a\nhierarchy. This is mainly useful when your map contains a large amount of\nlayers.\n\n\nThe visibility, opacity and offset of a group layer affects all child layers.\n\n\nLayers can be easily dragged in and out of groups with the mouse. The Raise\nLayer / Lower Layer actions also allow moving layers in and out of groups.\n\n\n\nFuture Extensions\n\u00b6\n\n\nThere are many ways in which the layers can be made more powerful:\n\n\n\n\nAbility to lock layers (\n#734\n) or\n  even individual objects (\n#828\n).\n\n\nMoving certain map-global properties to the Tile Layer\n  (\n#149\n). It would be useful if\n  one map could accomodate layers of different tile sizes and maybe even of\n  different orientation.\n\n\n\"Infinite\" tile layers that grow automatically\n  (\n#260\n).\n\n\n\n\nIf you like any of these plans, please help me getting around to it faster by\n\nbecoming a patron\n. The more support I\nreceive the more time I can afford to spend improving Tiled!",
            "title": "Working with Layers"
        },
        {
            "location": "/manual/layers/#working-with-layers",
            "text": "A Tiled map supports various sorts of content, and this content is organized\ninto various different layers. The most common layers are the Tile Layer  and the  Object Layer . There is\nalso an  Image Layer  for including simple foreground or\nbackground graphics. The order of the layers determines the rendering order of\nyour content.  Layers can be hidden or made only partially visible. Layers also have an offset,\nwhich can be used to position them independently of each other, for example to\nfake depth.  You use  Group Layers  to organize the layers into a hierarchy.\nThis makes it more comfortable to work with a large amount of layers.",
            "title": "Working with Layers"
        },
        {
            "location": "/manual/layers/#tile-layers",
            "text": "Tile layers provide an efficient way of storing a large area filled with tile\ndata. The data is a simple array of tile references and as such no additional\ninformation can be stored for each location. The only extra information stored\nare a few flags, that allow tile graphics to be flipped vertically, horizontally\nor anti-diagonally (to support rotation in 90-degree increments).  The information needed to render each tile layer is stored with the map, which\nspecifies the position and rendering order of the tiles based on the orientation\nand various other properties.  Despite only being able to refer to tiles, tile layers can also be useful for\ndefining various bits of non-graphical information in your level. Collision\ninformation can often be conveyed using a special tileset, and any kind of\nobject that does not need custom properties and is always aligned to the grid\ncan also be placed on a tile layer.",
            "title": "Tile Layers"
        },
        {
            "location": "/manual/layers/#object-layers",
            "text": "Object layers are useful because they can store many kinds of information that\nwould not fit in a tile layer. Objects can be freely positioned, resized and\nrotated. They can also have individual custom properties. There are many kinds\nof objects:   Rectangle  - for marking custom rectangular areas  Ellipse  - for marking custom ellipse or circular areas  Polygon  - for when a rectangle or ellipse doesn't cut it (often a\n  collision area)  Polyline  - can be a path to follow or a wall to collide with  Tile  - for freely placing, scaling and rotating your tile graphics  Text  - for custom text or notes (since Tiled 1.0)   All objects can be named, in which case their name will show up in a label above\nthem (by default only for selected objects). Objects can also be given a  type ,\nwhich is useful since it can be used to customize the color of their label and\nthe available  custom properties \nfor this object type. For tile objects, the type can be  inherited from their\ntile .  For most map types, objects are positioned in plain pixels. The only exception\nto this are isometric maps (not isometric staggered). For isometric maps, it was\ndeamed useful to store their positions in a projected coordinate space. For\nthis, the isometric tiles are assumed to represent projected squares with both\nsides equal to the  tile height . If you're using a different coordinate space\nfor objects in your isometric game, you'll need to convert these coordinates\naccordingly.  The object width and height is also mostly stored in pixels. For isometric maps,\nall shape objects (rectangle, ellipse, polygon and polyline) are projected into\nthe same coordinate space described above. This is based on the assumption that\nthese objects are generally used to mark areas on the map.",
            "title": "Object Layers"
        },
        {
            "location": "/manual/layers/#image-layers",
            "text": "Image layers provide a way to quickly include a single image as foreground or\nbackground of your map. They are currently not so useful, because if you instead\nadd the image as a Tileset and place it as a Tile Object, you gain the ability\nto freely scale and rotate the image.  The only advantage of using an image layer is that it avoids selecting /\ndragging the image while using the Select Objects tool, which is mainly due to\nthe lack of layer locking ( #734 ).  New in Tiled 1.0",
            "title": "Image Layers"
        },
        {
            "location": "/manual/layers/#group-layers",
            "text": "Group layers work like folders and can be used for organizing the layers into a\nhierarchy. This is mainly useful when your map contains a large amount of\nlayers.  The visibility, opacity and offset of a group layer affects all child layers.  Layers can be easily dragged in and out of groups with the mouse. The Raise\nLayer / Lower Layer actions also allow moving layers in and out of groups.",
            "title": "Group Layers"
        },
        {
            "location": "/manual/layers/#future-extensions",
            "text": "There are many ways in which the layers can be made more powerful:   Ability to lock layers ( #734 ) or\n  even individual objects ( #828 ).  Moving certain map-global properties to the Tile Layer\n  ( #149 ). It would be useful if\n  one map could accomodate layers of different tile sizes and maybe even of\n  different orientation.  \"Infinite\" tile layers that grow automatically\n  ( #260 ).   If you like any of these plans, please help me getting around to it faster by becoming a patron . The more support I\nreceive the more time I can afford to spend improving Tiled!",
            "title": "Future Extensions"
        },
        {
            "location": "/manual/editing-tile-layers/",
            "text": "Editing Tile Layers\n\u00b6\n\n\nTile Layers\n are what makes Tiled a \ntile map editor\n.\nAlthough not as flexible as \nObject Layers\n, they\nprovide efficient data storage and good rendering performance as well as\nefficient content creation. Every new map gets one by default, though feel free\nto delete it when you're not going to use it.\n\n\nStamp Brush\n\u00b6\n\n\nShortcut: \nB\n\n\nThe primary tool for editing tile layers is the Stamp Brush. It can be used to\npaint single tiles as well as larger \"stamps\", which is where it gets its name\nfrom. Using the right mouse button, it can also quickly capture tile stamps\nfrom the currently active layer. A tile stamp is commonly created by selecting\none or more tiles in the Tilesets view.\n\n\nThe Stamp Brush has some extra features:\n\n\n\n\n\n\nWhile holding \nShift\n, click any two points to draw a line between them.\n\n\n\n\n\n\nWhile holding \nCtrl+Shift\n, click any two points two draw a circle or ellipse\n  centered on the first point.\n\n\n\n\n\n\nActivate the \nRandom Mode\n using the dice button on the tool bar to have the\n  Stamp Brush paint with random tiles from the tile stamp. The probability of\n  each tile depends on how often it occurred on the tile stamp, as well as\n  the probability set on each tile in the \nTileset Editor\n.\n\n\n\n\n\n\nIn combination with the \nTile Stamps\n view, it can also place randomly from a\n  set of predefined tile stamps. This can be more useful than the \nRandom Mode\n,\n  which randomly places individual tiles.\n\n\n\n\n\n\nTerrain Brush\n\u00b6\n\n\nShortcut: \nT\n\n\nThe Terrain Brush allows for efficient editing with a certain type of\ncorner-based terrain transitions. Setting it up requires associating terrain\ninformation with your tiles, which is described in detail in\n\nUsing the Terrain Tool\n.\n\n\nSimilarly to the \nStamp Brush\n, you can draw lines by holding\n\nShift\n. When holding \nCtrl\n, the size of the editing area is reduced to one\ncorner (this currently doesn't work well in combination with drawing lines).\n\n\nNew in Tiled 1.0\n\n\n\nWhen holding \nAlt\n, the editing operations are also applied at a 180 degree\nrotation. This is especially useful when editing strategic maps where two sides\nneed to have equal opportunities. The modifier works well in combination with\neither \nShift\n for drawing lines or \nCtrl\n for reducing the edited area.\n\n\nBucket Fill Tool\n\u00b6\n\n\nShortcut: \nF\n\n\nThe Bucket Fill Tool provides a quick way of filling empty areas or areas\ncovered with the same tiles. The currently active tile stamp will be repeated in\nthe filled area. It can also be used in combination with the \nRandom Mode\n.\n\n\nWhen holding \nShift\n, the tool fills the currently selected area regardless of\nits contents. This is useful for filling custom areas that have been selected\npreviously using one or more \nSelection Tools\n.\n\n\nEraser\n\u00b6\n\n\nShortcut: \nE\n\n\nA simple eraser tool. Left click erases single tiles and right click can be used\nto quickly erase rectangular areas.\n\n\nSelection Tools\n\u00b6\n\n\nThere are various selection tools that all work in similar fashion:\n\n\n\n\n\n\nRectangular Select\n allows selection of rectangular areas (shortcut: \nR\n)\n\n\n\n\n\n\nMagic Wand\n allows selection of connected areas filled with the same\n  tile (shortcut: \nW\n)\n\n\n\n\n\n\nSelect Same Tile\n allows selection of same-tiles accross the entire layer\n  (shortcut: \nS\n)\n\n\n\n\n\n\nBy default, each of these tools replaces the currently selected area. The\nfollowing modifiers can be used to change this behavior:\n\n\n\n\nHolding \nShift\n expands the current selection with the new area\n\n\nHolding \nCtrl\n subtracts the new area from the current selection\n\n\nHolding \nCtrl\n and \nShift\n selects the intersection of the new area with the\n  current selection\n\n\n\n\nManaging Tile Stamps\n\u00b6\n\n\nIt can often be useful to store the current tile stamp somewhere to use it again\nlater. The following shortcuts work for this purpose:\n\n\n\n\nCtrl + 1-9\n - Store current tile stamp (similar to \nCtrl + C\n)\n\n\n1-9\n - Recall the stamp stored at this location (similar to \nCtrl + V\n)\n\n\n\n\nTile stamps can also be stored by name and extended with variations using the\n\nTile Stamps\n view.",
            "title": "Editing Tile Layers"
        },
        {
            "location": "/manual/editing-tile-layers/#editing-tile-layers",
            "text": "Tile Layers  are what makes Tiled a  tile map editor .\nAlthough not as flexible as  Object Layers , they\nprovide efficient data storage and good rendering performance as well as\nefficient content creation. Every new map gets one by default, though feel free\nto delete it when you're not going to use it.",
            "title": "Editing Tile Layers"
        },
        {
            "location": "/manual/editing-tile-layers/#stamp-brush",
            "text": "Shortcut:  B  The primary tool for editing tile layers is the Stamp Brush. It can be used to\npaint single tiles as well as larger \"stamps\", which is where it gets its name\nfrom. Using the right mouse button, it can also quickly capture tile stamps\nfrom the currently active layer. A tile stamp is commonly created by selecting\none or more tiles in the Tilesets view.  The Stamp Brush has some extra features:    While holding  Shift , click any two points to draw a line between them.    While holding  Ctrl+Shift , click any two points two draw a circle or ellipse\n  centered on the first point.    Activate the  Random Mode  using the dice button on the tool bar to have the\n  Stamp Brush paint with random tiles from the tile stamp. The probability of\n  each tile depends on how often it occurred on the tile stamp, as well as\n  the probability set on each tile in the  Tileset Editor .    In combination with the  Tile Stamps  view, it can also place randomly from a\n  set of predefined tile stamps. This can be more useful than the  Random Mode ,\n  which randomly places individual tiles.",
            "title": "Stamp Brush"
        },
        {
            "location": "/manual/editing-tile-layers/#terrain-brush",
            "text": "Shortcut:  T  The Terrain Brush allows for efficient editing with a certain type of\ncorner-based terrain transitions. Setting it up requires associating terrain\ninformation with your tiles, which is described in detail in Using the Terrain Tool .  Similarly to the  Stamp Brush , you can draw lines by holding Shift . When holding  Ctrl , the size of the editing area is reduced to one\ncorner (this currently doesn't work well in combination with drawing lines).  New in Tiled 1.0  When holding  Alt , the editing operations are also applied at a 180 degree\nrotation. This is especially useful when editing strategic maps where two sides\nneed to have equal opportunities. The modifier works well in combination with\neither  Shift  for drawing lines or  Ctrl  for reducing the edited area.",
            "title": "Terrain Brush"
        },
        {
            "location": "/manual/editing-tile-layers/#bucket-fill-tool",
            "text": "Shortcut:  F  The Bucket Fill Tool provides a quick way of filling empty areas or areas\ncovered with the same tiles. The currently active tile stamp will be repeated in\nthe filled area. It can also be used in combination with the  Random Mode .  When holding  Shift , the tool fills the currently selected area regardless of\nits contents. This is useful for filling custom areas that have been selected\npreviously using one or more  Selection Tools .",
            "title": "Bucket Fill Tool"
        },
        {
            "location": "/manual/editing-tile-layers/#eraser",
            "text": "Shortcut:  E  A simple eraser tool. Left click erases single tiles and right click can be used\nto quickly erase rectangular areas.",
            "title": "Eraser"
        },
        {
            "location": "/manual/editing-tile-layers/#selection-tools",
            "text": "There are various selection tools that all work in similar fashion:    Rectangular Select  allows selection of rectangular areas (shortcut:  R )    Magic Wand  allows selection of connected areas filled with the same\n  tile (shortcut:  W )    Select Same Tile  allows selection of same-tiles accross the entire layer\n  (shortcut:  S )    By default, each of these tools replaces the currently selected area. The\nfollowing modifiers can be used to change this behavior:   Holding  Shift  expands the current selection with the new area  Holding  Ctrl  subtracts the new area from the current selection  Holding  Ctrl  and  Shift  selects the intersection of the new area with the\n  current selection",
            "title": "Selection Tools"
        },
        {
            "location": "/manual/editing-tile-layers/#managing-tile-stamps",
            "text": "It can often be useful to store the current tile stamp somewhere to use it again\nlater. The following shortcuts work for this purpose:   Ctrl + 1-9  - Store current tile stamp (similar to  Ctrl + C )  1-9  - Recall the stamp stored at this location (similar to  Ctrl + V )   Tile stamps can also be stored by name and extended with variations using the Tile Stamps  view.",
            "title": "Managing Tile Stamps"
        },
        {
            "location": "/manual/custom-properties/",
            "text": "Custom Properties\n\u00b6\n\n\nOne of the major strengths of Tiled is that it allows setting custom properties\non all of its basic data structures. This way it is possible to include many\nforms of custom information, which can later be used by your game or by the\nframework you're using to integrate Tiled maps.\n\n\nCustom properties are displayed in the Properties view. This view is\ncontext-sensitive, usually displaying the properties of the last selected\nobject. For tiles in a tileset or objects on an object layer, it also supports\nmulti-selection.\n\n\n\n\nAdding Properties\n\u00b6\n\n\nWhen you add a property (using the '+' button at the bottom of the Properties\nview), you are prompted for its name and its type. Currently Tiled supports the\nfollowing basic property types:\n\n\n\n\nstring\n (any text, including multi-line text)\n\n\nfloat\n (a floating point number)\n\n\nint\n (a whole number)\n\n\nbool\n (true or false)\n\n\nfile\n (a relative path referencing a file)\n\n\ncolor\n (a 32-bit color value)\n\n\n\n\n\n\nThe property type is used to choose a custom editor in the Properties view.\nChoosing a number or boolean type also avoids that the value will get quoted in\nJSON and Lua exports.\n\n\nNew in Tiled 1.0\n\n\n\nTile Property Inheritance\n\u00b6\n\n\nWhen custom properties are added to a tile, these properties will also be\nvisible when an object instance of that tile is selected. This enables easy\nper-object overriding of certain default properties associated with a tile.\nThis becomes especially useful when combined with \ntyped tiles\n.\n\n\nInherited properties will be displayed in gray (disabled text color), whereas\noverridden properties will be displayed in black (usual text color).\n\n\nPredefining Properties\n\u00b6\n\n\nGeneral Setup\n\u00b6\n\n\nUsually you only use a limited set of object types in your game, and each type\nof object has a fixed set of possible properties, with specific types and\ndefault values. To save you time, Tiled allows predefining these properties\nbased on the \"Type\" field for objects. You can set this up using the Object\nTypes Editor, available from the \nView\n menu.\n\n\n\n\nBy default, Tiled stores these object types in the user settings. However, since\nyou'll often want to share them with other people in your project, you can\nexport your object types or change the storage location of the object types\nfile. A simple XML file with self-explanatory contents is used to store your\nobject types.\n\n\nThe color not only affects the rendering of the various shapes of objects, but\nis also the color of the label which will show up if you give your object a\nname.\n\n\nTo make the predefined properties show up in the Properties view, all you need\nto do is to enter the name of the type in the built-in \"Type\" property. Usually\nthis is what you're doing already anyway to tell your engine what kind of object\nit is dealing with.\n\n\nNew in Tiled 1.0\n\n\n\nTyped Tiles\n\u00b6\n\n\nIf you're using tile objects, you can set the type on the tile to avoid having\nto set it on each object instance. Setting the type on the tile makes the\npredefined properties visible when having the tile selected, allowing to\noverride the values. It also makes those possibly overriden values visible when\nhaving a tile object instance selected, again allowing you to override them.\n\n\nAn example use-case for this would be to define custom types like \"NPC\",\n\"Enemy\" or \"Item\" with properties like \"name\", \"health\" or \"weight\". You can\nthen specify values for these on the tiles representing these entities. And\nwhen placing those tiles as objects, you can override those values if you need\nto.\n\n\n\nFuture Extensions\n\u00b6\n\n\nThere are several types of custom properties I'd like to add:\n\n\n\n\nEnumerations\n, where you can predefine all possible values and it forms a\n  combo box (\n#1211\n).\n\n\nObject references\n, which would allow easily linking objects together and\n  Tiled could display such connections\n  (\n#707\n).\n\n\nArray properties\n, which would be properties having a list of values\n  (\n#1493\n).\n\n\nDictionary properties\n, which would be properties that can contain any\n  number of other properties as children\n  (\n#489\n).\n\n\n\n\nIt would also be nice to add support for \nlimiting property values\n, like\nthe length of string properties or a minimum/maximum on number values.\n\n\nApart from predefining properties based on object type, I'd like to add support\nfor \npredefining the properties for each data type\n. So defining which custom\nproperties are valid for maps, tilesets, layers, etc.\n(\n#1410\n)\n\n\nFinally, the predefined properties would work very well together with explicit\n\nsupport for projects\n. Then you could switch between different projects or\nget started on an existing project, without needing to configure Tiled to use\nthe right object type definitions.\n\n\nIf you like any of these plans, please help me getting around to it faster by\n\nbecoming a patron\n. The more support I\nreceive the more time I can afford to spend improving Tiled!",
            "title": "Custom Properties"
        },
        {
            "location": "/manual/custom-properties/#custom-properties",
            "text": "One of the major strengths of Tiled is that it allows setting custom properties\non all of its basic data structures. This way it is possible to include many\nforms of custom information, which can later be used by your game or by the\nframework you're using to integrate Tiled maps.  Custom properties are displayed in the Properties view. This view is\ncontext-sensitive, usually displaying the properties of the last selected\nobject. For tiles in a tileset or objects on an object layer, it also supports\nmulti-selection.",
            "title": "Custom Properties"
        },
        {
            "location": "/manual/custom-properties/#adding-properties",
            "text": "When you add a property (using the '+' button at the bottom of the Properties\nview), you are prompted for its name and its type. Currently Tiled supports the\nfollowing basic property types:   string  (any text, including multi-line text)  float  (a floating point number)  int  (a whole number)  bool  (true or false)  file  (a relative path referencing a file)  color  (a 32-bit color value)    The property type is used to choose a custom editor in the Properties view.\nChoosing a number or boolean type also avoids that the value will get quoted in\nJSON and Lua exports.  New in Tiled 1.0",
            "title": "Adding Properties"
        },
        {
            "location": "/manual/custom-properties/#tile-property-inheritance",
            "text": "When custom properties are added to a tile, these properties will also be\nvisible when an object instance of that tile is selected. This enables easy\nper-object overriding of certain default properties associated with a tile.\nThis becomes especially useful when combined with  typed tiles .  Inherited properties will be displayed in gray (disabled text color), whereas\noverridden properties will be displayed in black (usual text color).",
            "title": "Tile Property Inheritance"
        },
        {
            "location": "/manual/custom-properties/#predefining-properties",
            "text": "",
            "title": "Predefining Properties"
        },
        {
            "location": "/manual/custom-properties/#general-setup",
            "text": "Usually you only use a limited set of object types in your game, and each type\nof object has a fixed set of possible properties, with specific types and\ndefault values. To save you time, Tiled allows predefining these properties\nbased on the \"Type\" field for objects. You can set this up using the Object\nTypes Editor, available from the  View  menu.   By default, Tiled stores these object types in the user settings. However, since\nyou'll often want to share them with other people in your project, you can\nexport your object types or change the storage location of the object types\nfile. A simple XML file with self-explanatory contents is used to store your\nobject types.  The color not only affects the rendering of the various shapes of objects, but\nis also the color of the label which will show up if you give your object a\nname.  To make the predefined properties show up in the Properties view, all you need\nto do is to enter the name of the type in the built-in \"Type\" property. Usually\nthis is what you're doing already anyway to tell your engine what kind of object\nit is dealing with.  New in Tiled 1.0",
            "title": "General Setup"
        },
        {
            "location": "/manual/custom-properties/#typed-tiles",
            "text": "If you're using tile objects, you can set the type on the tile to avoid having\nto set it on each object instance. Setting the type on the tile makes the\npredefined properties visible when having the tile selected, allowing to\noverride the values. It also makes those possibly overriden values visible when\nhaving a tile object instance selected, again allowing you to override them.  An example use-case for this would be to define custom types like \"NPC\",\n\"Enemy\" or \"Item\" with properties like \"name\", \"health\" or \"weight\". You can\nthen specify values for these on the tiles representing these entities. And\nwhen placing those tiles as objects, you can override those values if you need\nto.",
            "title": "Typed Tiles"
        },
        {
            "location": "/manual/custom-properties/#future-extensions",
            "text": "There are several types of custom properties I'd like to add:   Enumerations , where you can predefine all possible values and it forms a\n  combo box ( #1211 ).  Object references , which would allow easily linking objects together and\n  Tiled could display such connections\n  ( #707 ).  Array properties , which would be properties having a list of values\n  ( #1493 ).  Dictionary properties , which would be properties that can contain any\n  number of other properties as children\n  ( #489 ).   It would also be nice to add support for  limiting property values , like\nthe length of string properties or a minimum/maximum on number values.  Apart from predefining properties based on object type, I'd like to add support\nfor  predefining the properties for each data type . So defining which custom\nproperties are valid for maps, tilesets, layers, etc.\n( #1410 )  Finally, the predefined properties would work very well together with explicit support for projects . Then you could switch between different projects or\nget started on an existing project, without needing to configure Tiled to use\nthe right object type definitions.  If you like any of these plans, please help me getting around to it faster by becoming a patron . The more support I\nreceive the more time I can afford to spend improving Tiled!",
            "title": "Future Extensions"
        },
        {
            "location": "/manual/using-the-terrain-tool/",
            "text": "Using the Terrain Tool\n\u00b6\n\n\nStarting with Tiled 0.9.0, a new tool was added specifically to make editing tile maps easier when using terrain transitions. There are of course multiple ways to do transitions between tiles. The Terrain tool in Tiled supports transition tiles that have a well-defined terrain type at each of their 4 corners, which seems to be the most common method.\n\n\nTo demonstrate how to use this tool I will describe the steps necessary to reproduce the \ndesert.tmx\n example map, which now also includes terrain information in its tileset.\n\n\nCreate a New Map and Add a Tileset\n\u00b6\n\n\nFirst of all create a new orthogonal map with a tile size of 32x32 pixels.\n\n\n\n\nThen, add the \ntmw_desert_spacing.png\n example tileset. This tileset uses a margin and spacing of 1 pixel (which is only to test if this functionality works, not because I'd recommend doing that).\n\n\n\n\nThis tileset has 4 different terrain types. Traditionally editing a map with these tiles meant that you had to carefully connect the right transitions to avoid broken edges. Now we will define the terrain information for this tileset, which the Terrain tool will use to automatically place the right transitions.\n\n\nDefine the Terrain Information\n\u00b6\n\n\nClick the small \"Edit Terrain Information\" button.\n\n\n\n\nThis dialog displays the list of terrain types in the tileset and allows you to mark corners of the tiles in your tileset as belonging to a certain terrain type. To start with, add each of the 4 terrain types. The fastest way is by right-clicking on a tile representing a certain terrain and choosing \"Add Terrain Type\". This automatically sets the tile as the image representing the terrain.\n\n\n\n\nGive each of the terrains an appropriate name. Once you're done, select the sand terrain and mark all corners in the tileset with this type of terrain. When you're done it should look like this:\n\n\n\n\nIf you make a mistake, just use Undo (or press \nCtrl+Z\n). Or if you notice a mistake later, either use the eraser to clear a terrain type from a corner or select the correct terrain type and paint over it.\n\n\nDo the same for each of the other terrain types. Eventually you'll have marked all tiles apart from the special objects.\n\n\n\n\nNow close the dialog so we can start trying out the Terrain tool.\n\n\nEditing with the Terrain Tool\n\u00b6\n\n\nSwitch from the Tilesets to the Terrains window. You should see the 4 terrain types represented in a list. Click on the sand terrain and start painting. You may immediately notice that nothing special is happening. This is because there are no other tiles on the map yet so the terrain tool doesn't really know how to help (because we have no transitions to \"nothing\" in our tileset). Assuming we're out to create a desert map, it's better to start by filling your entire map with sand. Just switch back to the Tilesets window for a moment, select the sand tile and then use the Fill tool.\n\n\nLet's switch back to the Terrains window and draw some cobblestones. Now you can see the tool in action!\n\n\n\n\nTry holding \nControl\n (\nCommand\n on a Mac) while drawing. This reduces the modified area to just the closest corner to the mouse, allowing for precision work.\n\n\nFinally, see what happens when you try drawing some dirt on the cobblestone. Because there are no transitions from dirt directly to cobblestone, the Terrain tool first inserts transitions to sand and from there to cobblestone. Neat!\n\n\n\n\nFinal Words\n\u00b6\n\n\nNow you should have a pretty good idea about how to use this tool in your own project. A few things to keep in mind:\n\n\n\n\n\n\nCurrently the tool requires all terrain types to be part of the same tileset. You can have multiple tilesets with terrain in your map, but the tool can't perform automatic transitions from a terrain from one tileset to a terrain in another tileset. This usually means you may have to combine several tiles into one image.\n\n\n\n\n\n\nSince defining the terrain information can be somewhat laboursome, you'll want to use the external tilesets feature of Tiled to share not only the image but also the terrain information among several maps. Note however, that it is not possible to edit the terrain information while the tileset is external. To work around this problem just temporarily import the tileset and then export it again.\n\n\n\n\n\n\nThe Terrain tool works fine with isometric maps as well (though not with the new \"staggered\" isometric maps). However, the Edit Terrain Information dialog is currently not able to render the overlay correctly for isometric tiles. When defining terrain for isometric tiles, imagine the top-left corner applies to the top of your isometric tile, the top-right corner applies to the right corner of your tile, etc. Check out the \nisometric_grass_and_water.tmx\n example when in doubt.\n\n\n\n\n\n\nThe tool will handle any number of terrain types and each corner of a tile can have a different type of terrain. Still, there are other ways of dealing with transitions that this tool can't handle. Also, it is not able to edit multiple layers at the same time. For a more flexible, but also more complicated way of automatic tile placement, check out [[Automapping]].\n\n\n\n\n\n\nI'm maintaining a \ncollection of tilesets\n that contain transitions that are compatible with this tool on \nOpenGameArt.org\n.",
            "title": "Using the Terrain Tool"
        },
        {
            "location": "/manual/using-the-terrain-tool/#using-the-terrain-tool",
            "text": "Starting with Tiled 0.9.0, a new tool was added specifically to make editing tile maps easier when using terrain transitions. There are of course multiple ways to do transitions between tiles. The Terrain tool in Tiled supports transition tiles that have a well-defined terrain type at each of their 4 corners, which seems to be the most common method.  To demonstrate how to use this tool I will describe the steps necessary to reproduce the  desert.tmx  example map, which now also includes terrain information in its tileset.",
            "title": "Using the Terrain Tool"
        },
        {
            "location": "/manual/using-the-terrain-tool/#create-a-new-map-and-add-a-tileset",
            "text": "First of all create a new orthogonal map with a tile size of 32x32 pixels.   Then, add the  tmw_desert_spacing.png  example tileset. This tileset uses a margin and spacing of 1 pixel (which is only to test if this functionality works, not because I'd recommend doing that).   This tileset has 4 different terrain types. Traditionally editing a map with these tiles meant that you had to carefully connect the right transitions to avoid broken edges. Now we will define the terrain information for this tileset, which the Terrain tool will use to automatically place the right transitions.",
            "title": "Create a New Map and Add a Tileset"
        },
        {
            "location": "/manual/using-the-terrain-tool/#define-the-terrain-information",
            "text": "Click the small \"Edit Terrain Information\" button.   This dialog displays the list of terrain types in the tileset and allows you to mark corners of the tiles in your tileset as belonging to a certain terrain type. To start with, add each of the 4 terrain types. The fastest way is by right-clicking on a tile representing a certain terrain and choosing \"Add Terrain Type\". This automatically sets the tile as the image representing the terrain.   Give each of the terrains an appropriate name. Once you're done, select the sand terrain and mark all corners in the tileset with this type of terrain. When you're done it should look like this:   If you make a mistake, just use Undo (or press  Ctrl+Z ). Or if you notice a mistake later, either use the eraser to clear a terrain type from a corner or select the correct terrain type and paint over it.  Do the same for each of the other terrain types. Eventually you'll have marked all tiles apart from the special objects.   Now close the dialog so we can start trying out the Terrain tool.",
            "title": "Define the Terrain Information"
        },
        {
            "location": "/manual/using-the-terrain-tool/#editing-with-the-terrain-tool",
            "text": "Switch from the Tilesets to the Terrains window. You should see the 4 terrain types represented in a list. Click on the sand terrain and start painting. You may immediately notice that nothing special is happening. This is because there are no other tiles on the map yet so the terrain tool doesn't really know how to help (because we have no transitions to \"nothing\" in our tileset). Assuming we're out to create a desert map, it's better to start by filling your entire map with sand. Just switch back to the Tilesets window for a moment, select the sand tile and then use the Fill tool.  Let's switch back to the Terrains window and draw some cobblestones. Now you can see the tool in action!   Try holding  Control  ( Command  on a Mac) while drawing. This reduces the modified area to just the closest corner to the mouse, allowing for precision work.  Finally, see what happens when you try drawing some dirt on the cobblestone. Because there are no transitions from dirt directly to cobblestone, the Terrain tool first inserts transitions to sand and from there to cobblestone. Neat!",
            "title": "Editing with the Terrain Tool"
        },
        {
            "location": "/manual/using-the-terrain-tool/#final-words",
            "text": "Now you should have a pretty good idea about how to use this tool in your own project. A few things to keep in mind:    Currently the tool requires all terrain types to be part of the same tileset. You can have multiple tilesets with terrain in your map, but the tool can't perform automatic transitions from a terrain from one tileset to a terrain in another tileset. This usually means you may have to combine several tiles into one image.    Since defining the terrain information can be somewhat laboursome, you'll want to use the external tilesets feature of Tiled to share not only the image but also the terrain information among several maps. Note however, that it is not possible to edit the terrain information while the tileset is external. To work around this problem just temporarily import the tileset and then export it again.    The Terrain tool works fine with isometric maps as well (though not with the new \"staggered\" isometric maps). However, the Edit Terrain Information dialog is currently not able to render the overlay correctly for isometric tiles. When defining terrain for isometric tiles, imagine the top-left corner applies to the top of your isometric tile, the top-right corner applies to the right corner of your tile, etc. Check out the  isometric_grass_and_water.tmx  example when in doubt.    The tool will handle any number of terrain types and each corner of a tile can have a different type of terrain. Still, there are other ways of dealing with transitions that this tool can't handle. Also, it is not able to edit multiple layers at the same time. For a more flexible, but also more complicated way of automatic tile placement, check out [[Automapping]].    I'm maintaining a  collection of tilesets  that contain transitions that are compatible with this tool on  OpenGameArt.org .",
            "title": "Final Words"
        },
        {
            "location": "/manual/using-commands/",
            "text": "Using Commands\n\u00b6\n\n\nThe Command Button allows you to create and run shell commands (other programs) from Tiled.\n\n\nYou may setup as many commands as you like. This is useful if you edit maps for multiple games and you want to set up a command for each game. Or you could setup multiple commands for the same game that load different checkpoints or configurations.\n\n\nThe Command Button\n\u00b6\n\n\nIt is located on the main toolbar to the right of the redo button. Clicking on it will run the default command (the first command in the command list). Clicking the arrow next to it will bring down a menu that allows you to run any command you have set up, as well as an option to open the Edit Commands dialog.\n\n\nYou can press F5 as a shortcut to clicking the button to run the default command.\n\n\nEditing Commands\n\u00b6\n\n\nThe 'Edit Commands' dialog contains a list of commands. Each command has several properties:\n\n\n\n\nName\n: The name of the command as it will be shown in the drop down list, so you can easily identify it.\n\n\nCommand\n: The actual shell command to execute. This usually starts with an executable program followed by arguments. You can use the following variables:\n\n\n%mapfile\n is replaced with the current maps full path.\n\n\n%objecttype\n is replaced with the type of the currently selected object, if any. (since Tiled 0.12)\n\n\n%objectid\n is replaced with the ID of the currently selected object, if any. (since Tiled 0.17)\n\n\n%layername\n is replaced with the name of the currently selected layer. (since Tiled 0.17)\n\n\n\n\n\n\nEnabled\n: A quick way to disable commands and remove them from the drop down list.\n\n\nThe default command is the first enabled command.\n\n\n\n\n\n\n\n\nYou can also change whether or not it should save the current map before running commands.\n\n\nNote that if the program or any of its arguments contain spaces, these parts need to be quoted.\n\n\nExample Commands\n\u00b6\n\n\nLaunching a custom game called \"mygame\" with a -loadmap parameter and the mapfile:\n\n\nmygame -loadmap %mapfile\n\n\n\nOn Mac, remember that Apps are folders, so you need to run the actual executable from within the \nContents/MacOS\n folder:\n\n\n/Applications/TextEdit.app/Contents/MacOS/TextEdit %mapfile\n\n\n\nOr use \nopen\n (and note the quotes since one of the arguments contains spaces):\n\n\nopen -a \"/Applications/CoronaSDK/Corona Simulator.app\" /Users/user/Desktop/project/main.lua\n\n\n\nSome systems also have a command to open files in the appropriate program:\n\n\n\n\nOSX: \nopen %mapfile\n\n\nGNOME systems like Ubuntu: \ngnome-open %mapfile\n\n\nFreeDesktop.org standard: \nxdg-open %mapfile",
            "title": "Using Commands"
        },
        {
            "location": "/manual/using-commands/#using-commands",
            "text": "The Command Button allows you to create and run shell commands (other programs) from Tiled.  You may setup as many commands as you like. This is useful if you edit maps for multiple games and you want to set up a command for each game. Or you could setup multiple commands for the same game that load different checkpoints or configurations.",
            "title": "Using Commands"
        },
        {
            "location": "/manual/using-commands/#the-command-button",
            "text": "It is located on the main toolbar to the right of the redo button. Clicking on it will run the default command (the first command in the command list). Clicking the arrow next to it will bring down a menu that allows you to run any command you have set up, as well as an option to open the Edit Commands dialog.  You can press F5 as a shortcut to clicking the button to run the default command.",
            "title": "The Command Button"
        },
        {
            "location": "/manual/using-commands/#editing-commands",
            "text": "The 'Edit Commands' dialog contains a list of commands. Each command has several properties:   Name : The name of the command as it will be shown in the drop down list, so you can easily identify it.  Command : The actual shell command to execute. This usually starts with an executable program followed by arguments. You can use the following variables:  %mapfile  is replaced with the current maps full path.  %objecttype  is replaced with the type of the currently selected object, if any. (since Tiled 0.12)  %objectid  is replaced with the ID of the currently selected object, if any. (since Tiled 0.17)  %layername  is replaced with the name of the currently selected layer. (since Tiled 0.17)    Enabled : A quick way to disable commands and remove them from the drop down list.  The default command is the first enabled command.     You can also change whether or not it should save the current map before running commands.  Note that if the program or any of its arguments contain spaces, these parts need to be quoted.",
            "title": "Editing Commands"
        },
        {
            "location": "/manual/using-commands/#example-commands",
            "text": "Launching a custom game called \"mygame\" with a -loadmap parameter and the mapfile:  mygame -loadmap %mapfile  On Mac, remember that Apps are folders, so you need to run the actual executable from within the  Contents/MacOS  folder:  /Applications/TextEdit.app/Contents/MacOS/TextEdit %mapfile  Or use  open  (and note the quotes since one of the arguments contains spaces):  open -a \"/Applications/CoronaSDK/Corona Simulator.app\" /Users/user/Desktop/project/main.lua  Some systems also have a command to open files in the appropriate program:   OSX:  open %mapfile  GNOME systems like Ubuntu:  gnome-open %mapfile  FreeDesktop.org standard:  xdg-open %mapfile",
            "title": "Example Commands"
        },
        {
            "location": "/manual/keyboard-shortcuts/",
            "text": "Keyboard Shortcuts\n\u00b6\n\n\nTry out these keyboard shortcuts to help save you time.\n\n\nOn Mac, replace \nCtrl\n with the \nCommand\n key.\n\n\nGeneral\n\u00b6\n\n\n\n\nRight Click on Tile\n - Captures the tile under the mouse (drag to capture  larger areas).\n\n\nCtrl + MouseWheel\n - Zoom in/out on tileset and map\n\n\nCtrl + Plus/Minus\n - Zoom in/out on map\n\n\nCtrl + 0\n - Reset zoom on map\n\n\nCtrl + Object Move\n - Toggles \"Snap to Grid\" temporarily\n\n\nCtrl + Object Resize\n - Keep aspect ratio\n\n\nAlt + Object Resize\n - Toggles \"Snap to Grid\" temporarily\n\n\nMiddle Click\n or \nSpace Bar\n - Hold to pan the map view\n\n\nF5\n - Run the \nfirst custom command\n\n\nCtrl + X\n - Cut (tiles or objects)\n\n\nCtrl + C\n - Copy (tiles or objects)\n\n\nCtrl + V\n - Paste (tiles or objects)\n\n\nDel\n - Delete (tiles or objects)\n\n\nH\n - Toggle highlighting of the current layer\n\n\nA\n - Invokes \nAutomapping\n\n\nAlt + C\n - Copy current position of mouse cursor to clipboard (in tile coordinates)\n\n\nCtrl + D\n - Duplicate selected objects (since Tiled 1.0, before it was Delete)\n\n\nCtrl + Shift + D\n - Duplicate active layer\n\n\nF2\n - Rename (if applicable in context)\n\n\nTab\n - Hide docks and tool bars (since Tiled 1.0)\n\n\nCtrl + PgUp\n - Select previous layer (above current layer)\n\n\nCtrl + PgDown\n - Select next layer (below current layer)\n\n\nCtrl + Shift + Up\n - Move current layer up\n\n\nCtrl + Shift + Down\n - Move current layer down\n\n\nCtrl + Shift + H\n - Show/Hide all other layers (only active layer visible / all layers visible)\n\n\nCtrl + Tab\n - Switch to left document\n\n\nCtrl + Shift + Tab\n - Switch to right document\n\n\nAlt + Left\n - Switch to left document\n\n\nAlt + Right\n - Switch to right document\n\n\nCtrl + G\n - Toggle displaying of the tile grid\n\n\nCtrl + W\n - Close current document\n\n\nCtrl + Shift + W\n - Close all documents\n\n\nCtrl + E\n - Export current document\n\n\nCtrl + Shift + E\n - Export current document to another file\n\n\nCtrl + R\n - Reload current document\n\n\nCtrl + T\n - Force-reload all tilesets used by the current map (mainly useful when not using the automatic reloading)\n\n\n\n\nWhen a tile layer is selected\n\u00b6\n\n\n\n\nB\n - Activate Stamp Brush tool\n\n\nT\n - Activate \nTerrain Brush\n tool\n\n\nF\n - Activate Bucket Fill tool\n\n\nE\n - Activate Eraser tool\n\n\nR\n - Activate Rectangular Select tool\n\n\nW\n - Activate Magic Wand tool\n\n\nS\n - Activate Select Same Tile tool\n\n\nCtrl + 1-9\n - Store current tile selection (similar to \nCtrl + C\n)\n\n\n1-9\n recall the previous selection (similar to \nCtrl + V\n)\n\n\n\n\nWhen an object layer is selected\n\u00b6\n\n\n\n\nS\n - Activate Select Objects tool\n\n\nPgUp\n - Raise selected objects (with Manual object drawing order)\n\n\nPgDown\n - Lower selected objects (with Manual object drawing order)\n\n\nHome\n - Move selected objects to Top (with Manual object drawing order)\n\n\nEnd\n - Move selected objects to Bottom (with Manual object drawing order)\n\n\n\n\n\n\nE\n - Activate Edit Polygons tool\n\n\nR\n - Activate Insert Rectangle tool\n\n\nC\n - Activate Insert Ellipse tool\n\n\nP\n - Activate Insert Polygon tool\n\n\nL\n - Activate Insert Polyline tool\n\n\nEnter\n - Finish creating object\n\n\nEscape\n - Cancel creating object\n\n\n\n\n\n\nT\n - Activate Insert Tile tool\n\n\nX\n - Activate Insert Text tool\n\n\n\n\nWhen using the brush tool\n\u00b6\n\n\n\n\nShift + Click\n - Line Tool, auto place tiles between two cells\n\n\nCtrl + Shift + Click\n - Circle Tool, auto place tiles around a radius\n\n\nX\n - Flip selection horizontally\n\n\nY\n - Flip selection vertically\n\n\nZ\n - Rotate selection clockwise\n\n\nShift + Z\n - Rotate selection counterclockwise\n\n\n\n\nWhen using the Rectangular Select tool\n\u00b6\n\n\n\n\nCtrl + A\n - Select the whole layer\n\n\nCtrl + Shift + A\n - Select nothing\n\n\n\n\nIn the properties dialog\n\u00b6\n\n\n\n\nDel\n or \nBackspace\n - Deletes a property",
            "title": "Keyboard Shortcuts"
        },
        {
            "location": "/manual/keyboard-shortcuts/#keyboard-shortcuts",
            "text": "Try out these keyboard shortcuts to help save you time.  On Mac, replace  Ctrl  with the  Command  key.",
            "title": "Keyboard Shortcuts"
        },
        {
            "location": "/manual/keyboard-shortcuts/#general",
            "text": "Right Click on Tile  - Captures the tile under the mouse (drag to capture  larger areas).  Ctrl + MouseWheel  - Zoom in/out on tileset and map  Ctrl + Plus/Minus  - Zoom in/out on map  Ctrl + 0  - Reset zoom on map  Ctrl + Object Move  - Toggles \"Snap to Grid\" temporarily  Ctrl + Object Resize  - Keep aspect ratio  Alt + Object Resize  - Toggles \"Snap to Grid\" temporarily  Middle Click  or  Space Bar  - Hold to pan the map view  F5  - Run the  first custom command  Ctrl + X  - Cut (tiles or objects)  Ctrl + C  - Copy (tiles or objects)  Ctrl + V  - Paste (tiles or objects)  Del  - Delete (tiles or objects)  H  - Toggle highlighting of the current layer  A  - Invokes  Automapping  Alt + C  - Copy current position of mouse cursor to clipboard (in tile coordinates)  Ctrl + D  - Duplicate selected objects (since Tiled 1.0, before it was Delete)  Ctrl + Shift + D  - Duplicate active layer  F2  - Rename (if applicable in context)  Tab  - Hide docks and tool bars (since Tiled 1.0)  Ctrl + PgUp  - Select previous layer (above current layer)  Ctrl + PgDown  - Select next layer (below current layer)  Ctrl + Shift + Up  - Move current layer up  Ctrl + Shift + Down  - Move current layer down  Ctrl + Shift + H  - Show/Hide all other layers (only active layer visible / all layers visible)  Ctrl + Tab  - Switch to left document  Ctrl + Shift + Tab  - Switch to right document  Alt + Left  - Switch to left document  Alt + Right  - Switch to right document  Ctrl + G  - Toggle displaying of the tile grid  Ctrl + W  - Close current document  Ctrl + Shift + W  - Close all documents  Ctrl + E  - Export current document  Ctrl + Shift + E  - Export current document to another file  Ctrl + R  - Reload current document  Ctrl + T  - Force-reload all tilesets used by the current map (mainly useful when not using the automatic reloading)",
            "title": "General"
        },
        {
            "location": "/manual/keyboard-shortcuts/#when-a-tile-layer-is-selected",
            "text": "B  - Activate Stamp Brush tool  T  - Activate  Terrain Brush  tool  F  - Activate Bucket Fill tool  E  - Activate Eraser tool  R  - Activate Rectangular Select tool  W  - Activate Magic Wand tool  S  - Activate Select Same Tile tool  Ctrl + 1-9  - Store current tile selection (similar to  Ctrl + C )  1-9  recall the previous selection (similar to  Ctrl + V )",
            "title": "When a tile layer is selected"
        },
        {
            "location": "/manual/keyboard-shortcuts/#when-an-object-layer-is-selected",
            "text": "S  - Activate Select Objects tool  PgUp  - Raise selected objects (with Manual object drawing order)  PgDown  - Lower selected objects (with Manual object drawing order)  Home  - Move selected objects to Top (with Manual object drawing order)  End  - Move selected objects to Bottom (with Manual object drawing order)    E  - Activate Edit Polygons tool  R  - Activate Insert Rectangle tool  C  - Activate Insert Ellipse tool  P  - Activate Insert Polygon tool  L  - Activate Insert Polyline tool  Enter  - Finish creating object  Escape  - Cancel creating object    T  - Activate Insert Tile tool  X  - Activate Insert Text tool",
            "title": "When an object layer is selected"
        },
        {
            "location": "/manual/keyboard-shortcuts/#when-using-the-brush-tool",
            "text": "Shift + Click  - Line Tool, auto place tiles between two cells  Ctrl + Shift + Click  - Circle Tool, auto place tiles around a radius  X  - Flip selection horizontally  Y  - Flip selection vertically  Z  - Rotate selection clockwise  Shift + Z  - Rotate selection counterclockwise",
            "title": "When using the brush tool"
        },
        {
            "location": "/manual/keyboard-shortcuts/#when-using-the-rectangular-select-tool",
            "text": "Ctrl + A  - Select the whole layer  Ctrl + Shift + A  - Select nothing",
            "title": "When using the Rectangular Select tool"
        },
        {
            "location": "/manual/keyboard-shortcuts/#in-the-properties-dialog",
            "text": "Del  or  Backspace  - Deletes a property",
            "title": "In the properties dialog"
        },
        {
            "location": "/reference/tmx-map-format/",
            "text": "TMX Map Format\n\u00b6\n\n\nThe TMX (Tile Map XML) map format used by \nTiled\n is a flexible way to describe a tile based map. It can describe maps with any tile size, any amount of layers, any number of tile sets and it allows custom properties to be set on most elements. Beside tile layers, it can also contain groups of objects that can be placed freely.\n\n\nNote that there are many \nlibraries and frameworks\n available that can work with TMX maps.\n\n\nIn this document we'll go through each element found in this map format. The elements are mentioned in the headers and the list of attributes of the elements are listed right below, followed by a short explanation. Attributes or elements that are deprecated or unsupported by the current version of Tiled are formatted in italics.\n\n\nHave a look at the \nchangelog\n when you're interested in what changed between Tiled versions.\n\n\nA DTD-file (Document Type Definition) is served at \nhttp://mapeditor.org/dtd/1.0/map.dtd\n. This file is not up-to-date but might be useful for XML-namespacing anyway.\n\n\n<map>\n\u00b6\n\n\n\n\nversion:\n The TMX format version, generally 1.0.\n\n\norientation:\n Map orientation. Tiled supports \"orthogonal\", \"isometric\", \"staggered\" (since 0.9) and \"hexagonal\" (since 0.11).\n\n\nrenderorder:\n The order in which tiles on tile layers are rendered. Valid values are \nright-down\n (the default), \nright-up\n, \nleft-down\n and \nleft-up\n. In all cases, the map is drawn row-by-row. (since 0.10, but only supported for orthogonal maps at the moment)\n\n\nwidth:\n The map width in tiles.\n\n\nheight:\n The map height in tiles.\n\n\ntilewidth:\n The width of a tile.\n\n\ntileheight:\n The height of a tile.\n\n\nhexsidelength:\n Only for hexagonal maps. Determines the width or height (depending on the staggered axis) of the tile's edge, in pixels.\n\n\nstaggeraxis:\n For staggered and hexagonal maps, determines which axis (\"x\" or \"y\") is staggered. (since 0.11)\n\n\nstaggerindex:\n For staggered and hexagonal maps, determines whether the \"even\" or \"odd\" indexes along the staggered axis are shifted. (since 0.11)\n\n\nbackgroundcolor:\n The background color of the map. (since 0.9, optional, may include alpha value since 0.15 in the form \n#AARRGGBB\n)\n\n\nnextobjectid:\n Stores the next available ID for new objects. This number is stored to prevent reuse of the same ID after objects have been removed. (since 0.11)\n\n\n\n\nThe \ntilewidth\n and \ntileheight\n properties determine the general grid size of the map. The individual tiles may have different sizes. Larger tiles will extend at the top and right (anchored to the bottom left).\n\n\nA map contains three different kinds of layers. Tile layers were once the only type, and are simply called \nlayer\n, object layers have the \nobjectgroup\n tag and image layers use the \nimagelayer\n tag. The order in which these layers appear is the order in which the layers are rendered by Tiled.\n\n\nCan contain: \nproperties\n, \ntileset\n, \nlayer\n, \nobjectgroup\n, \nimagelayer\n\n\n<tileset>\n\u00b6\n\n\n\n\nfirstgid:\n The first global tile ID of this tileset (this global ID maps to the first tile in this tileset).\n\n\nsource:\n If this tileset is stored in an external TSX (Tile Set XML) file, this attribute refers to that file. That TSX file has the same structure as the \n<tileset>\n element described here. (There is the \nfirstgid\n attribute missing and this \nsource\n attribute is also not there. These two attributes are kept in the TMX map, since they are map specific.)\n\n\nname:\n The name of this tileset.\n\n\ntilewidth:\n The (maximum) width of the tiles in this tileset.\n\n\ntileheight:\n The (maximum) height of the tiles in this tileset.\n\n\nspacing:\n The spacing in pixels between the tiles in this tileset (applies to the tileset image).\n\n\nmargin:\n The margin around the tiles in this tileset (applies to the tileset image).\n\n\ntilecount:\n The number of tiles in this tileset (since 0.13)\n\n\ncolumns:\n The number of tile columns in the tileset. For image collection tilesets it is editable and is used when displaying the tileset. (since 0.15)\n\n\n\n\nIf there are multiple \n<tileset>\n elements, they are in ascending order of their \nfirstgid\n attribute. The first tileset always has a \nfirstgid\n value of 1. Since Tiled 0.15, image collection tilesets do not necessarily number their tiles consecutively since gaps can occur when removing tiles.\n\n\nCan contain: \ntileoffset\n (since 0.8), \nproperties\n (since 0.8), \nimage\n, \nterraintypes\n (since 0.9), \ntile\n\n\n<tileoffset>\n\u00b6\n\n\n\n\nx:\n Horizontal offset in pixels\n\n\ny:\n Vertical offset in pixels (positive is down)\n\n\n\n\nThis element is used to specify an offset in pixels, to be applied when drawing a tile from the related tileset. When not present, no offset is applied.\n\n\n<image>\n\u00b6\n\n\n\n\nformat:\n Used for embedded images, in combination with a \ndata\n child element. Valid values are file extensions like \npng\n, \ngif\n, \njpg\n, \nbmp\n, etc. (since 0.9)\n\n\nid:\n Used by some versions of Tiled Java. Deprecated and unsupported by Tiled Qt.\n\n\nsource:\n The reference to the tileset image file (Tiled supports most common image formats).\n\n\ntrans:\n Defines a specific color that is treated as transparent (example value: \"#FF00FF\" for magenta). Up until Tiled 0.12, this value is written out without a \n#\n but this is planned to change.\n\n\nwidth:\n The image width in pixels (optional, used for tile index correction when the image changes)\n\n\nheight:\n The image height in pixels (optional)\n\n\n\n\nNote that it is not currently possible to use Tiled to create maps with embedded image data, even though the TMX format supports this. It is possible to create such maps using \nlibtiled\n (Qt/C++) or \ntmxlib\n (Python).\n\n\nCan contain: \ndata\n (since 0.9)\n\n\n<terraintypes>\n\u00b6\n\n\nThis element defines an array of terrain types, which can be referenced from the \nterrain\n attribute of the \ntile\n element.\n\n\nCan contain: \nterrain\n\n\n<terrain>\n\u00b6\n\n\n\n\nname:\n The name of the terrain type.\n\n\ntile:\n The local tile-id of the tile that represents the terrain visually.\n\n\n\n\nCan contain: \nproperties\n\n\n<tile>\n\u00b6\n\n\n\n\nid:\n The local tile ID within its tileset.\n\n\nterrain:\n Defines the terrain type of each corner of the tile, given as comma-separated indexes in the terrain types array in the order top-left, top-right, bottom-left, bottom-right. Leaving out a value means that corner has no terrain. (optional) (since 0.9)\n\n\nprobability:\n A percentage indicating the probability that this tile is chosen when it competes with others while editing with the terrain tool. (optional) (since 0.9)\n\n\n\n\nCan contain: \nproperties\n, \nimage\n (since 0.9), \nobjectgroup\n (since 0.10), \nanimation\n (since 0.10)\n\n\n<animation>\n\u00b6\n\n\nContains a list of animation frames.\n\n\nAs of Tiled 0.10, each tile can have exactly one animation associated with it. In the future, there could be support for multiple named animations on a tile.\n\n\nCan contain: \nframe\n\n\n<frame>\n\u00b6\n\n\n\n\ntileid\n: The local ID of a tile within the parent \ntileset\n.\n\n\nduration\n: How long (in milliseconds) this frame should be displayed before advancing to the next frame.\n\n\n\n\n<layer>\n\u00b6\n\n\nAll \n<tileset>\n tags shall occur before the first \n<layer>\n tag so that parsers may rely on having the tilesets before needing to resolve tiles.\n\n\n\n\nname:\n The name of the layer.\n\n\nx:\n The x coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\ny:\n The y coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\nwidth:\n The width of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map width.\n\n\nheight:\n The height of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map height.\n\n\nopacity:\n The opacity of the layer as a value from 0 to 1. Defaults to 1.\n\n\nvisible:\n Whether the layer is shown (1) or hidden (0). Defaults to 1.\n\n\noffsetx:\n Rendering offset for this layer in pixels. Defaults to 0. (since 0.14)\n\n\noffsety:\n Rendering offset for this layer in pixels. Defaults to 0. (since 0.14)\n\n\n\n\nCan contain: \nproperties\n, \ndata\n\n\n<data>\n\u00b6\n\n\n\n\nencoding:\n The encoding used to encode the tile layer data. When used, it can be \"base64\" and \"csv\" at the moment.\n\n\ncompression:\n The compression used to compress the tile layer data. Tiled Qt supports \"gzip\" and \"zlib\".\n\n\n\n\nWhen no encoding or compression is given, the tiles are stored as individual XML \ntile\n elements. Next to that, the easiest format to parse is the \"csv\" (comma separated values) format.\n\n\nThe base64-encoded and optionally compressed layer data is somewhat more complicated to parse. First you need to base64-decode it, then you may need to decompress it. Now you have an array of bytes, which should be interpreted as an array of unsigned 32-bit integers using little-endian byte ordering.\n\n\nWhatever format you choose for your layer data, you will always end up with so called \"global tile IDs\" (gids). They are global, since they may refer to a tile from any of the tilesets used by the map. In order to find out from which tileset the tile is you need to find the tileset with the highest \nfirstgid\n that is still lower or equal than the gid. The tilesets are always stored with increasing \nfirstgid\ns.\n\n\nCan contain: \ntile\n\n\nTile flipping\n\u00b6\n\n\nWhen you use the tile flipping feature added in Tiled Qt 0.7, the highest two bits of the gid store the flipped state. Bit 32 is used for storing whether the tile is horizontally flipped and bit 31 is used for the vertically flipped tiles. And since Tiled Qt 0.8, bit 30 means whether the tile is flipped (anti) diagonally, enabling tile rotation. These bits have to be read and cleared \nbefore\n you can find out which tileset a tile belongs to.\n\n\nWhen rendering a tile, the order of operation matters. The diagonal flip (x/y axis swap) is done first, followed by the horizontal and vertical flips.\n\n\nThe following C++ pseudo-code should make it all clear:\n\n\n// Bits on the far end of the 32-bit global tile ID are used for tile flags\nconst unsigned FLIPPED_HORIZONTALLY_FLAG = 0x80000000;\nconst unsigned FLIPPED_VERTICALLY_FLAG   = 0x40000000;\nconst unsigned FLIPPED_DIAGONALLY_FLAG   = 0x20000000;\n\n...\n\n// Extract the contents of the <data> element\nstring tile_data = ...\n\nunsigned char *data = decompress(base64_decode(tile_data));\nunsigned tile_index = 0;\n\n// Here you should check that the data has the right size\n// (map_width * map_height * 4)\n\nfor (int y = 0; y < map_height; ++y) {\n  for (int x = 0; x < map_width; ++x) {\n    unsigned global_tile_id = data[tile_index] |\n                              data[tile_index + 1] << 8 |\n                              data[tile_index + 2] << 16 |\n                              data[tile_index + 3] << 24;\n    tile_index += 4;\n\n    // Read out the flags\n    bool flipped_horizontally = (global_tile_id & FLIPPED_HORIZONTALLY_FLAG);\n    bool flipped_vertically = (global_tile_id & FLIPPED_VERTICALLY_FLAG);\n    bool flipped_diagonally = (global_tile_id & FLIPPED_DIAGONALLY_FLAG);\n\n    // Clear the flags\n    global_tile_id &= ~(FLIPPED_HORIZONTALLY_FLAG |\n                        FLIPPED_VERTICALLY_FLAG |\n                        FLIPPED_DIAGONALLY_FLAG);\n\n    // Resolve the tile\n    for (int i = tileset_count - 1; i >= 0; --i) {\n      Tileset *tileset = tilesets[i];\n\n      if (tileset->first_gid() <= global_tile_id) {\n        tiles[y][x] = tileset->tileAt(global_tile_id - tileset->first_gid());\n        break;\n      }\n    }\n  }\n}\n\n\n\n\n(Since the above code was put together on this wiki page and can't be directly tested, please make sure to report any errors you encounter when basing your parsing code on it, thanks.)\n\n\n<tile>\n\u00b6\n\n\n\n\ngid:\n The global tile ID.\n\n\n\n\nNot to be confused with the \ntile\n element inside a \ntileset\n, this element defines the value of a single tile on a tile layer. This is however the most inefficient way of storing the tile layer data, and should generally be avoided.\n\n\n<objectgroup>\n\u00b6\n\n\n\n\nname:\n The name of the object group.\n\n\ncolor:\n The color used to display the objects in this group.\n\n\nx:\n The x coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\ny:\n The y coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.\n\n\nwidth:\n The width of the object group in tiles. Meaningless.\n\n\nheight:\n The height of the object group in tiles. Meaningless.\n\n\nopacity:\n The opacity of the layer as a value from 0 to 1. Defaults to 1.\n\n\nvisible:\n Whether the layer is shown (1) or hidden (0). Defaults to 1.\n\n\noffsetx:\n Rendering offset for this object group in pixels. Defaults to 0. (since 0.14)\n\n\noffsety:\n Rendering offset for this object group in pixels. Defaults to 0. (since 0.14)\n\n\ndraworder:\n Whether the objects are drawn according to the order of appearance (\"index\") or sorted by their y-coordinate (\"topdown\"). Defaults to \"topdown\".\n\n\n\n\nThe object group is in fact a map layer, and is hence called \"object layer\" in Tiled Qt.\n\n\nCan contain: \nproperties\n, \nobject\n\n\n<object>\n\u00b6\n\n\n\n\nid:\n Unique ID of the object. Each object that is placed on a map gets a unique id. Even if an object was deleted, no object gets the same ID. Can not be changed in Tiled Qt. (since Tiled 0.11)\n\n\nname:\n The name of the object. An arbitrary string.\n\n\ntype:\n The type of the object. An arbitrary string.\n\n\nx:\n The x coordinate of the object in pixels.\n\n\ny:\n The y coordinate of the object in pixels.\n\n\nwidth:\n The width of the object in pixels (defaults to 0).\n\n\nheight:\n The height of the object in pixels (defaults to 0).\n\n\nrotation:\n The rotation of the object in degrees clockwise (defaults to 0). (since 0.10)\n\n\ngid:\n An reference to a tile (optional).\n\n\nvisible:\n Whether the object is shown (1) or hidden (0). Defaults to 1. (since 0.9)\n\n\n\n\nWhile tile layers are very suitable for anything repetitive aligned to the tile grid, sometimes you want to annotate your map with other information, not necessarily aligned to the grid. Hence the objects have their coordinates and size in pixels, but you can still easily align that to the grid when you want to.\n\n\nYou generally use objects to add custom information to your tile map, such as spawn points, warps, exits, etc.\n\n\nWhen the object has a \ngid\n set, then it is represented by the image of the tile with that global ID. The image alignment currently depends on the map orientation. In orthogonal orientation it's aligned to the bottom-left while in isometric it's aligned to the bottom-center.\n\n\nCan contain: \nproperties\n, \nellipse\n (since 0.9), \npolygon\n, \npolyline\n, \nimage\n\n\n<ellipse>\n\u00b6\n\n\nUsed to mark an object as an ellipse. The existing \nx\n, \ny\n, \nwidth\n and \nheight\n attributes are used to determine the size of the ellipse.\n\n\n<polygon>\n\u00b6\n\n\n\n\npoints:\n A list of x,y coordinates in pixels.\n\n\n\n\nEach \npolygon\n object is made up of a space-delimited list of x,y coordinates. The origin for these coordinates is the location of the parent \nobject\n. By default, the first point is created as 0,0 denoting that the point will originate exactly where the \nobject\n is placed.\n\n\n<polyline>\n\u00b6\n\n\n\n\npoints:\n A list of x,y coordinates in pixels.\n\n\n\n\nA \npolyline\n follows the same placement definition as a \npolygon\n object.\n\n\n<imagelayer>\n\u00b6\n\n\n\n\nname:\n The name of the image layer.\n\n\noffsetx:\n Rendering offset of the image layer in pixels. Defaults to 0. (since 0.15)\n\n\noffsety:\n Rendering offset of the image layer in pixels. Defaults to 0. (since 0.15)\n\n\nx:\n The x position of the image layer in pixels. (deprecated since 0.15)\n\n\ny:\n The y position of the image layer in pixels. (deprecated since 0.15)\n\n\nwidth:\n The width of the image layer in tiles. Meaningless.\n\n\nheight:\n The height of the image layer in tiles. Meaningless.\n\n\nopacity:\n The opacity of the layer as a value from 0 to 1. Defaults to 1.\n\n\nvisible:\n Whether the layer is shown (1) or hidden (0). Defaults to 1.\n\n\n\n\nA layer consisting of a single image.\n\n\nCan contain: \nproperties\n, \nimage\n\n\n<properties>\n\u00b6\n\n\nCan contain: \nproperty\n\n\nWraps any number of custom properties. Can be used as a child of the \nmap\n, \ntileset\n, \ntile\n (when part of a \ntileset\n), \nlayer\n, \nobjectgroup\n, \nobject\n and \nimagelayer\n elements.\n\n\n<property>\n\u00b6\n\n\n\n\nname:\n The name of the property.\n\n\ntype:\n The type of the property. Can be \nstring\n (default), \nint\n, \nfloat\n, \nbool\n, \ncolor\n or \nfile\n (since 0.16, with \ncolor\n and \nfile\n added in 0.17).\n\n\nvalue:\n The value of the property.\n\n\n\n\nBoolean properties have a value of either \"true\" or \"false\".\n\n\nColor properties are stored in the format \n#AARRGGBB\n.\n\n\nFile properties are stored as paths relative from the location of the map file.\n\n\nWhen a string property contains newlines, the current version of Tiled will write out the value as characters contained inside the \nproperty\n element rather than as the \nvalue\n attribute. It is possible that a future version of the TMX format will switch to always saving property values inside the element rather than as an attribute.\n\n\n\n\n\n\nThe \nTMX Map Format\n by \nhttp://www.mapeditor.org\n is licensed under a \nCreative Commons Attribution-ShareAlike 3.0 Unported License\n.",
            "title": "TMX Map Format"
        },
        {
            "location": "/reference/tmx-map-format/#tmx-map-format",
            "text": "The TMX (Tile Map XML) map format used by  Tiled  is a flexible way to describe a tile based map. It can describe maps with any tile size, any amount of layers, any number of tile sets and it allows custom properties to be set on most elements. Beside tile layers, it can also contain groups of objects that can be placed freely.  Note that there are many  libraries and frameworks  available that can work with TMX maps.  In this document we'll go through each element found in this map format. The elements are mentioned in the headers and the list of attributes of the elements are listed right below, followed by a short explanation. Attributes or elements that are deprecated or unsupported by the current version of Tiled are formatted in italics.  Have a look at the  changelog  when you're interested in what changed between Tiled versions.  A DTD-file (Document Type Definition) is served at  http://mapeditor.org/dtd/1.0/map.dtd . This file is not up-to-date but might be useful for XML-namespacing anyway.",
            "title": "TMX Map Format"
        },
        {
            "location": "/reference/tmx-map-format/#map",
            "text": "version:  The TMX format version, generally 1.0.  orientation:  Map orientation. Tiled supports \"orthogonal\", \"isometric\", \"staggered\" (since 0.9) and \"hexagonal\" (since 0.11).  renderorder:  The order in which tiles on tile layers are rendered. Valid values are  right-down  (the default),  right-up ,  left-down  and  left-up . In all cases, the map is drawn row-by-row. (since 0.10, but only supported for orthogonal maps at the moment)  width:  The map width in tiles.  height:  The map height in tiles.  tilewidth:  The width of a tile.  tileheight:  The height of a tile.  hexsidelength:  Only for hexagonal maps. Determines the width or height (depending on the staggered axis) of the tile's edge, in pixels.  staggeraxis:  For staggered and hexagonal maps, determines which axis (\"x\" or \"y\") is staggered. (since 0.11)  staggerindex:  For staggered and hexagonal maps, determines whether the \"even\" or \"odd\" indexes along the staggered axis are shifted. (since 0.11)  backgroundcolor:  The background color of the map. (since 0.9, optional, may include alpha value since 0.15 in the form  #AARRGGBB )  nextobjectid:  Stores the next available ID for new objects. This number is stored to prevent reuse of the same ID after objects have been removed. (since 0.11)   The  tilewidth  and  tileheight  properties determine the general grid size of the map. The individual tiles may have different sizes. Larger tiles will extend at the top and right (anchored to the bottom left).  A map contains three different kinds of layers. Tile layers were once the only type, and are simply called  layer , object layers have the  objectgroup  tag and image layers use the  imagelayer  tag. The order in which these layers appear is the order in which the layers are rendered by Tiled.  Can contain:  properties ,  tileset ,  layer ,  objectgroup ,  imagelayer",
            "title": "&lt;map&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#tileset",
            "text": "firstgid:  The first global tile ID of this tileset (this global ID maps to the first tile in this tileset).  source:  If this tileset is stored in an external TSX (Tile Set XML) file, this attribute refers to that file. That TSX file has the same structure as the  <tileset>  element described here. (There is the  firstgid  attribute missing and this  source  attribute is also not there. These two attributes are kept in the TMX map, since they are map specific.)  name:  The name of this tileset.  tilewidth:  The (maximum) width of the tiles in this tileset.  tileheight:  The (maximum) height of the tiles in this tileset.  spacing:  The spacing in pixels between the tiles in this tileset (applies to the tileset image).  margin:  The margin around the tiles in this tileset (applies to the tileset image).  tilecount:  The number of tiles in this tileset (since 0.13)  columns:  The number of tile columns in the tileset. For image collection tilesets it is editable and is used when displaying the tileset. (since 0.15)   If there are multiple  <tileset>  elements, they are in ascending order of their  firstgid  attribute. The first tileset always has a  firstgid  value of 1. Since Tiled 0.15, image collection tilesets do not necessarily number their tiles consecutively since gaps can occur when removing tiles.  Can contain:  tileoffset  (since 0.8),  properties  (since 0.8),  image ,  terraintypes  (since 0.9),  tile",
            "title": "&lt;tileset&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#tileoffset",
            "text": "x:  Horizontal offset in pixels  y:  Vertical offset in pixels (positive is down)   This element is used to specify an offset in pixels, to be applied when drawing a tile from the related tileset. When not present, no offset is applied.",
            "title": "&lt;tileoffset&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#image",
            "text": "format:  Used for embedded images, in combination with a  data  child element. Valid values are file extensions like  png ,  gif ,  jpg ,  bmp , etc. (since 0.9)  id:  Used by some versions of Tiled Java. Deprecated and unsupported by Tiled Qt.  source:  The reference to the tileset image file (Tiled supports most common image formats).  trans:  Defines a specific color that is treated as transparent (example value: \"#FF00FF\" for magenta). Up until Tiled 0.12, this value is written out without a  #  but this is planned to change.  width:  The image width in pixels (optional, used for tile index correction when the image changes)  height:  The image height in pixels (optional)   Note that it is not currently possible to use Tiled to create maps with embedded image data, even though the TMX format supports this. It is possible to create such maps using  libtiled  (Qt/C++) or  tmxlib  (Python).  Can contain:  data  (since 0.9)",
            "title": "&lt;image&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#terraintypes",
            "text": "This element defines an array of terrain types, which can be referenced from the  terrain  attribute of the  tile  element.  Can contain:  terrain",
            "title": "&lt;terraintypes&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#terrain",
            "text": "name:  The name of the terrain type.  tile:  The local tile-id of the tile that represents the terrain visually.   Can contain:  properties",
            "title": "&lt;terrain&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#tile",
            "text": "id:  The local tile ID within its tileset.  terrain:  Defines the terrain type of each corner of the tile, given as comma-separated indexes in the terrain types array in the order top-left, top-right, bottom-left, bottom-right. Leaving out a value means that corner has no terrain. (optional) (since 0.9)  probability:  A percentage indicating the probability that this tile is chosen when it competes with others while editing with the terrain tool. (optional) (since 0.9)   Can contain:  properties ,  image  (since 0.9),  objectgroup  (since 0.10),  animation  (since 0.10)",
            "title": "&lt;tile&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#animation",
            "text": "Contains a list of animation frames.  As of Tiled 0.10, each tile can have exactly one animation associated with it. In the future, there could be support for multiple named animations on a tile.  Can contain:  frame",
            "title": "&lt;animation&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#frame",
            "text": "tileid : The local ID of a tile within the parent  tileset .  duration : How long (in milliseconds) this frame should be displayed before advancing to the next frame.",
            "title": "&lt;frame&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#layer",
            "text": "All  <tileset>  tags shall occur before the first  <layer>  tag so that parsers may rely on having the tilesets before needing to resolve tiles.   name:  The name of the layer.  x:  The x coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  y:  The y coordinate of the layer in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  width:  The width of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map width.  height:  The height of the layer in tiles. Traditionally required, but as of Tiled Qt always the same as the map height.  opacity:  The opacity of the layer as a value from 0 to 1. Defaults to 1.  visible:  Whether the layer is shown (1) or hidden (0). Defaults to 1.  offsetx:  Rendering offset for this layer in pixels. Defaults to 0. (since 0.14)  offsety:  Rendering offset for this layer in pixels. Defaults to 0. (since 0.14)   Can contain:  properties ,  data",
            "title": "&lt;layer&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#data",
            "text": "encoding:  The encoding used to encode the tile layer data. When used, it can be \"base64\" and \"csv\" at the moment.  compression:  The compression used to compress the tile layer data. Tiled Qt supports \"gzip\" and \"zlib\".   When no encoding or compression is given, the tiles are stored as individual XML  tile  elements. Next to that, the easiest format to parse is the \"csv\" (comma separated values) format.  The base64-encoded and optionally compressed layer data is somewhat more complicated to parse. First you need to base64-decode it, then you may need to decompress it. Now you have an array of bytes, which should be interpreted as an array of unsigned 32-bit integers using little-endian byte ordering.  Whatever format you choose for your layer data, you will always end up with so called \"global tile IDs\" (gids). They are global, since they may refer to a tile from any of the tilesets used by the map. In order to find out from which tileset the tile is you need to find the tileset with the highest  firstgid  that is still lower or equal than the gid. The tilesets are always stored with increasing  firstgid s.  Can contain:  tile",
            "title": "&lt;data&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#tile-flipping",
            "text": "When you use the tile flipping feature added in Tiled Qt 0.7, the highest two bits of the gid store the flipped state. Bit 32 is used for storing whether the tile is horizontally flipped and bit 31 is used for the vertically flipped tiles. And since Tiled Qt 0.8, bit 30 means whether the tile is flipped (anti) diagonally, enabling tile rotation. These bits have to be read and cleared  before  you can find out which tileset a tile belongs to.  When rendering a tile, the order of operation matters. The diagonal flip (x/y axis swap) is done first, followed by the horizontal and vertical flips.  The following C++ pseudo-code should make it all clear:  // Bits on the far end of the 32-bit global tile ID are used for tile flags\nconst unsigned FLIPPED_HORIZONTALLY_FLAG = 0x80000000;\nconst unsigned FLIPPED_VERTICALLY_FLAG   = 0x40000000;\nconst unsigned FLIPPED_DIAGONALLY_FLAG   = 0x20000000;\n\n...\n\n// Extract the contents of the <data> element\nstring tile_data = ...\n\nunsigned char *data = decompress(base64_decode(tile_data));\nunsigned tile_index = 0;\n\n// Here you should check that the data has the right size\n// (map_width * map_height * 4)\n\nfor (int y = 0; y < map_height; ++y) {\n  for (int x = 0; x < map_width; ++x) {\n    unsigned global_tile_id = data[tile_index] |\n                              data[tile_index + 1] << 8 |\n                              data[tile_index + 2] << 16 |\n                              data[tile_index + 3] << 24;\n    tile_index += 4;\n\n    // Read out the flags\n    bool flipped_horizontally = (global_tile_id & FLIPPED_HORIZONTALLY_FLAG);\n    bool flipped_vertically = (global_tile_id & FLIPPED_VERTICALLY_FLAG);\n    bool flipped_diagonally = (global_tile_id & FLIPPED_DIAGONALLY_FLAG);\n\n    // Clear the flags\n    global_tile_id &= ~(FLIPPED_HORIZONTALLY_FLAG |\n                        FLIPPED_VERTICALLY_FLAG |\n                        FLIPPED_DIAGONALLY_FLAG);\n\n    // Resolve the tile\n    for (int i = tileset_count - 1; i >= 0; --i) {\n      Tileset *tileset = tilesets[i];\n\n      if (tileset->first_gid() <= global_tile_id) {\n        tiles[y][x] = tileset->tileAt(global_tile_id - tileset->first_gid());\n        break;\n      }\n    }\n  }\n}  (Since the above code was put together on this wiki page and can't be directly tested, please make sure to report any errors you encounter when basing your parsing code on it, thanks.)",
            "title": "Tile flipping"
        },
        {
            "location": "/reference/tmx-map-format/#tile_1",
            "text": "gid:  The global tile ID.   Not to be confused with the  tile  element inside a  tileset , this element defines the value of a single tile on a tile layer. This is however the most inefficient way of storing the tile layer data, and should generally be avoided.",
            "title": "&lt;tile&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#objectgroup",
            "text": "name:  The name of the object group.  color:  The color used to display the objects in this group.  x:  The x coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  y:  The y coordinate of the object group in tiles. Defaults to 0 and can no longer be changed in Tiled Qt.  width:  The width of the object group in tiles. Meaningless.  height:  The height of the object group in tiles. Meaningless.  opacity:  The opacity of the layer as a value from 0 to 1. Defaults to 1.  visible:  Whether the layer is shown (1) or hidden (0). Defaults to 1.  offsetx:  Rendering offset for this object group in pixels. Defaults to 0. (since 0.14)  offsety:  Rendering offset for this object group in pixels. Defaults to 0. (since 0.14)  draworder:  Whether the objects are drawn according to the order of appearance (\"index\") or sorted by their y-coordinate (\"topdown\"). Defaults to \"topdown\".   The object group is in fact a map layer, and is hence called \"object layer\" in Tiled Qt.  Can contain:  properties ,  object",
            "title": "&lt;objectgroup&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#object",
            "text": "id:  Unique ID of the object. Each object that is placed on a map gets a unique id. Even if an object was deleted, no object gets the same ID. Can not be changed in Tiled Qt. (since Tiled 0.11)  name:  The name of the object. An arbitrary string.  type:  The type of the object. An arbitrary string.  x:  The x coordinate of the object in pixels.  y:  The y coordinate of the object in pixels.  width:  The width of the object in pixels (defaults to 0).  height:  The height of the object in pixels (defaults to 0).  rotation:  The rotation of the object in degrees clockwise (defaults to 0). (since 0.10)  gid:  An reference to a tile (optional).  visible:  Whether the object is shown (1) or hidden (0). Defaults to 1. (since 0.9)   While tile layers are very suitable for anything repetitive aligned to the tile grid, sometimes you want to annotate your map with other information, not necessarily aligned to the grid. Hence the objects have their coordinates and size in pixels, but you can still easily align that to the grid when you want to.  You generally use objects to add custom information to your tile map, such as spawn points, warps, exits, etc.  When the object has a  gid  set, then it is represented by the image of the tile with that global ID. The image alignment currently depends on the map orientation. In orthogonal orientation it's aligned to the bottom-left while in isometric it's aligned to the bottom-center.  Can contain:  properties ,  ellipse  (since 0.9),  polygon ,  polyline ,  image",
            "title": "&lt;object&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#ellipse",
            "text": "Used to mark an object as an ellipse. The existing  x ,  y ,  width  and  height  attributes are used to determine the size of the ellipse.",
            "title": "&lt;ellipse&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#polygon",
            "text": "points:  A list of x,y coordinates in pixels.   Each  polygon  object is made up of a space-delimited list of x,y coordinates. The origin for these coordinates is the location of the parent  object . By default, the first point is created as 0,0 denoting that the point will originate exactly where the  object  is placed.",
            "title": "&lt;polygon&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#polyline",
            "text": "points:  A list of x,y coordinates in pixels.   A  polyline  follows the same placement definition as a  polygon  object.",
            "title": "&lt;polyline&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#imagelayer",
            "text": "name:  The name of the image layer.  offsetx:  Rendering offset of the image layer in pixels. Defaults to 0. (since 0.15)  offsety:  Rendering offset of the image layer in pixels. Defaults to 0. (since 0.15)  x:  The x position of the image layer in pixels. (deprecated since 0.15)  y:  The y position of the image layer in pixels. (deprecated since 0.15)  width:  The width of the image layer in tiles. Meaningless.  height:  The height of the image layer in tiles. Meaningless.  opacity:  The opacity of the layer as a value from 0 to 1. Defaults to 1.  visible:  Whether the layer is shown (1) or hidden (0). Defaults to 1.   A layer consisting of a single image.  Can contain:  properties ,  image",
            "title": "&lt;imagelayer&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#properties",
            "text": "Can contain:  property  Wraps any number of custom properties. Can be used as a child of the  map ,  tileset ,  tile  (when part of a  tileset ),  layer ,  objectgroup ,  object  and  imagelayer  elements.",
            "title": "&lt;properties&gt;"
        },
        {
            "location": "/reference/tmx-map-format/#property",
            "text": "name:  The name of the property.  type:  The type of the property. Can be  string  (default),  int ,  float ,  bool ,  color  or  file  (since 0.16, with  color  and  file  added in 0.17).  value:  The value of the property.   Boolean properties have a value of either \"true\" or \"false\".  Color properties are stored in the format  #AARRGGBB .  File properties are stored as paths relative from the location of the map file.  When a string property contains newlines, the current version of Tiled will write out the value as characters contained inside the  property  element rather than as the  value  attribute. It is possible that a future version of the TMX format will switch to always saving property values inside the element rather than as an attribute.    The  TMX Map Format  by  http://www.mapeditor.org  is licensed under a  Creative Commons Attribution-ShareAlike 3.0 Unported License .",
            "title": "&lt;property&gt;"
        },
        {
            "location": "/reference/tmx-changelog/",
            "text": "TMX Changelog\n\u00b6\n\n\nBelow are described the changes/additions that were made to the \nTMX format\n for recent versions of Tiled.\n\n\nTiled 0.17\n\u00b6\n\n\n\n\nAdded \ncolor\n and \nfile\n as possible values for the \nproperty.type\n attribute.\n\n\nAdded support for editing multi-line string properties, which are written out differently.\n\n\n\n\nTiled 0.16\n\u00b6\n\n\n\n\nThe \nproperty\n element gained a \ntype\n attribute, storing the type of the value. Currently supported types are \nstring\n (the default), \nint\n, \nfloat\n and \nbool\n.\n\n\n\n\nTiled 0.15\n\u00b6\n\n\n\n\nThe \noffsetx\n and \noffsety\n attributes are now also used for \nimagelayer\n elements, replacing the \nx\n and \ny\n attributes previously used. This change was made for consistency with the other layer types.\n\n\nThe tiles in an image collection tileset are no longer guaranteed to be consecutive, because removing tiles from the collection will no longer change the IDs of other tiles.\n\n\nThe pure XML and Gzip-compressed tile layer data formats were deprecated, since they didn't have any advantage over other formats. Remaining formats are CSV, base64 and Zlib-compressed layer data.\n\n\nAdded \ncolumns\n attribute to the \ntileset\n element, which specifies the number of tile columns in the tileset. For image collection tilesets it is editable and is used when displaying the tileset.\n\n\nThe \nbackgroundcolor\n attribute of the \nmap\n element will now take the format \n#AARRGGBB\n when its alpha value differs from 255. Previously the alpha value was silently discarded.\n\n\n\n\nTiled 0.14\n\u00b6\n\n\n\n\nAdded optional \noffsetx\n and \noffsety\n attributes to the \nlayer\n and \nobjectgroup\n elements. These specify an offset in pixels that is to be applied when rendering the layer. The default values are 0.\n\n\n\n\nTiled 0.13\n\u00b6\n\n\n\n\nAdded an optional \ntilecount\n attribute to the \ntileset\n element, which is written by Tiled to help parsers determine the amount of memory to allocate for tile data.\n\n\n\n\nTiled 0.12\n\u00b6\n\n\n\n\nPreviously tile objects never had \nwidth\n and \nheight\n properties, though the format technically allowed this. Now these properties are used to store the size the image should be rendered at. The default values for these attributes are the dimensions of the tile image.\n\n\n\n\nTiled 0.11\n\u00b6\n\n\n\n\nAdded \nhexagonal\n to the supported values for the \norientation\n attribute on the \nmap\n element. This also adds \nstaggerindex\n (\neven\n or \nodd\n) and \nstaggeraxis\n (\nx\n or \ny\n) and \nhexsidelength\n (integer value) attributes to the \nmap\n element, in order to support the many variations of staggered hexagonal. The new \nstaggerindex\n and \nstaggeraxis\n attributes are also supported when using the \nstaggered\n map orientation.\n\n\nAdded an \nid\n attribute to the \nobject\n element, which stores a map-unique ID of the object.\n\n\nAdded a \nnextobjectid\n attribute to the \nmap\n element, which stores the next available ID for new objects. This number is stored to prevent reuse of the same ID after objects have been removed.\n\n\n\n\nTiled 0.10\n\u00b6\n\n\n\n\n\n\nTile objects can now be horizontally or vertically flipped. This is stored in the \ngid\n attribute using the same mechanism as for regular tiles. The image is expected to be flipped without affecting its position, same way as flipped tiles.\n\n\n\n\n\n\nObjects can be rotated freely. The rotation is stored in degrees as a \nrotation\n attribute, with positive rotation going clockwise.\n\n\n\n\n\n\nThe render order of the tiles on tile layers can be configured in a number of ways through a new \nrenderorder\n property on the \nmap\n element. Valid values are \nright-down\n (the default), \nright-up\n, \nleft-down\n and \nleft-up\n. In all cases, the map is drawn row-by-row. This is only supported for orthogonal maps at the moment.\n\n\n\n\n\n\nThe render order of objects on object layers can be configured to be either sorted by their y-coordinate (previous behavior and still the default) or simply the order of appearance in the map file. The latter enables manual control over the drawing order with actions that \"Raise\" and \"Lower\" selected objects. It is controlled by the \ndraworder\n property on the \nobjectgroup\n element, which can be either \ntopdown\n (default) or \nindex\n.\n\n\n\n\n\n\nTiles can have an \nobjectgroup\n child element, which can contain objects that define the collision shape to use for that tile. This information can be edited in the new Tile Collision Editor.\n\n\n\n\n\n\nTiles can have a single looping animation associated with them using an \nanimation\n child element. Each frame of the animation refers to a local tile ID from this tileset and defines the frame duration in milliseconds. Example:\n\n\n\n\n\n\n<tileset ...>\n    ...\n    <tile id=\"[n]\">\n        <animation>\n            <frame tileid=\"0\" duration=\"100\"/>\n            <frame tileid=\"1\" duration=\"100\"/>\n            <frame tileid=\"2\" duration=\"100\"/>\n        </animation>\n    </tile>\n</tileset>\n\n\n\n\nTiled 0.9\n\u00b6\n\n\n\n\nPer-object visibility flag is saved (defaults to 1):\n\n\n\n\n<object visible=\"0|1\">\n\n\n\n\n\n\nTerrain information was added to tileset definitions (this is generally not very relevant for games):\n\n\n\n\n<tileset ...>\n    ...\n    <terraintypes>\n        <terrain name=\"Name\" tile=\"local_id\"/>\n    </terraintypes>\n    <tile id=\"local_id\" terrain=\"[n],[n],[n],[n]\" probability=\"percentage\"/>\n    ...\n</tileset>\n\n\n\n\n\n\n\n\nThere is preliminary support for a \"staggered\" (isometric) projection (new value for the \norientation\n attribute of the \nmap\n element).\n\n\n\n\n\n\nA basic image layer type was added:\n\n\n\n\n\n\n<imagelayer ...>\n    <image source=\"...\"/>\n</imagelayer>\n\n\n\n\n\n\nAdded ellipse object shape. Same parameters as rectangular objects, but marked as ellipse with a child element:\n\n\n\n\n<object ...>\n    <ellipse/>\n</object>\n\n\n\n\n\n\nAdded map property for specifying the background color:\n\n\n\n\n<map ... backgroundcolor=\"#RRGGBB\">\n\n\n\n\n\n\nAdded initial (non-GUI) support for individual and/or embedded tile images (since there is no way to set this up in Tiled Qt but only in Tiled Java or with \npytmxlib\n, this is not very important to support at the moment):\n\n\n\n\n<tileset ...>\n    <tile id=\"[n]\">\n        <!-- an embedded image -->\n        <image format=\"png\">\n            <data encoding=\"base64\">\n                ...\n            </data>\n        </image>\n    </tile>\n    <tile id=\"[n]\">\n        <!-- an individually referenced image for a single tile -->\n        <image source=\"file.png\"/>\n    </tile>\n    ...\n</tileset>\n\n\n\n\nTiled 0.8\n\u00b6\n\n\n\n\n\n\nTilesets can now have custom properties (using the \nproperties\n child element, just like everything else).\n\n\n\n\n\n\nTilesets now support defining a drawing offset in pixels, which is to be used when drawing any tiles from that tileset. Example:\n\n\n\n\n\n\n<tileset name=\"perspective_walls\" tilewidth=\"64\" tileheight=\"64\">\n    <tileoffset x=\"-32\" y=\"0\"/>\n    ...\n</tileset>\n\n\n\n\n\n\nSupport for tile rotation in 90-degree increments was added by using the third most significant bit in the global tile id. This new bit means \"anti-diagonal flip\", which swaps the x and y axis when rendering a tile.",
            "title": "TMX Changelog"
        },
        {
            "location": "/reference/tmx-changelog/#tmx-changelog",
            "text": "Below are described the changes/additions that were made to the  TMX format  for recent versions of Tiled.",
            "title": "TMX Changelog"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-017",
            "text": "Added  color  and  file  as possible values for the  property.type  attribute.  Added support for editing multi-line string properties, which are written out differently.",
            "title": "Tiled 0.17"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-016",
            "text": "The  property  element gained a  type  attribute, storing the type of the value. Currently supported types are  string  (the default),  int ,  float  and  bool .",
            "title": "Tiled 0.16"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-015",
            "text": "The  offsetx  and  offsety  attributes are now also used for  imagelayer  elements, replacing the  x  and  y  attributes previously used. This change was made for consistency with the other layer types.  The tiles in an image collection tileset are no longer guaranteed to be consecutive, because removing tiles from the collection will no longer change the IDs of other tiles.  The pure XML and Gzip-compressed tile layer data formats were deprecated, since they didn't have any advantage over other formats. Remaining formats are CSV, base64 and Zlib-compressed layer data.  Added  columns  attribute to the  tileset  element, which specifies the number of tile columns in the tileset. For image collection tilesets it is editable and is used when displaying the tileset.  The  backgroundcolor  attribute of the  map  element will now take the format  #AARRGGBB  when its alpha value differs from 255. Previously the alpha value was silently discarded.",
            "title": "Tiled 0.15"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-014",
            "text": "Added optional  offsetx  and  offsety  attributes to the  layer  and  objectgroup  elements. These specify an offset in pixels that is to be applied when rendering the layer. The default values are 0.",
            "title": "Tiled 0.14"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-013",
            "text": "Added an optional  tilecount  attribute to the  tileset  element, which is written by Tiled to help parsers determine the amount of memory to allocate for tile data.",
            "title": "Tiled 0.13"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-012",
            "text": "Previously tile objects never had  width  and  height  properties, though the format technically allowed this. Now these properties are used to store the size the image should be rendered at. The default values for these attributes are the dimensions of the tile image.",
            "title": "Tiled 0.12"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-011",
            "text": "Added  hexagonal  to the supported values for the  orientation  attribute on the  map  element. This also adds  staggerindex  ( even  or  odd ) and  staggeraxis  ( x  or  y ) and  hexsidelength  (integer value) attributes to the  map  element, in order to support the many variations of staggered hexagonal. The new  staggerindex  and  staggeraxis  attributes are also supported when using the  staggered  map orientation.  Added an  id  attribute to the  object  element, which stores a map-unique ID of the object.  Added a  nextobjectid  attribute to the  map  element, which stores the next available ID for new objects. This number is stored to prevent reuse of the same ID after objects have been removed.",
            "title": "Tiled 0.11"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-010",
            "text": "Tile objects can now be horizontally or vertically flipped. This is stored in the  gid  attribute using the same mechanism as for regular tiles. The image is expected to be flipped without affecting its position, same way as flipped tiles.    Objects can be rotated freely. The rotation is stored in degrees as a  rotation  attribute, with positive rotation going clockwise.    The render order of the tiles on tile layers can be configured in a number of ways through a new  renderorder  property on the  map  element. Valid values are  right-down  (the default),  right-up ,  left-down  and  left-up . In all cases, the map is drawn row-by-row. This is only supported for orthogonal maps at the moment.    The render order of objects on object layers can be configured to be either sorted by their y-coordinate (previous behavior and still the default) or simply the order of appearance in the map file. The latter enables manual control over the drawing order with actions that \"Raise\" and \"Lower\" selected objects. It is controlled by the  draworder  property on the  objectgroup  element, which can be either  topdown  (default) or  index .    Tiles can have an  objectgroup  child element, which can contain objects that define the collision shape to use for that tile. This information can be edited in the new Tile Collision Editor.    Tiles can have a single looping animation associated with them using an  animation  child element. Each frame of the animation refers to a local tile ID from this tileset and defines the frame duration in milliseconds. Example:    <tileset ...>\n    ...\n    <tile id=\"[n]\">\n        <animation>\n            <frame tileid=\"0\" duration=\"100\"/>\n            <frame tileid=\"1\" duration=\"100\"/>\n            <frame tileid=\"2\" duration=\"100\"/>\n        </animation>\n    </tile>\n</tileset>",
            "title": "Tiled 0.10"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-09",
            "text": "Per-object visibility flag is saved (defaults to 1):   <object visible=\"0|1\">   Terrain information was added to tileset definitions (this is generally not very relevant for games):   <tileset ...>\n    ...\n    <terraintypes>\n        <terrain name=\"Name\" tile=\"local_id\"/>\n    </terraintypes>\n    <tile id=\"local_id\" terrain=\"[n],[n],[n],[n]\" probability=\"percentage\"/>\n    ...\n</tileset>    There is preliminary support for a \"staggered\" (isometric) projection (new value for the  orientation  attribute of the  map  element).    A basic image layer type was added:    <imagelayer ...>\n    <image source=\"...\"/>\n</imagelayer>   Added ellipse object shape. Same parameters as rectangular objects, but marked as ellipse with a child element:   <object ...>\n    <ellipse/>\n</object>   Added map property for specifying the background color:   <map ... backgroundcolor=\"#RRGGBB\">   Added initial (non-GUI) support for individual and/or embedded tile images (since there is no way to set this up in Tiled Qt but only in Tiled Java or with  pytmxlib , this is not very important to support at the moment):   <tileset ...>\n    <tile id=\"[n]\">\n        <!-- an embedded image -->\n        <image format=\"png\">\n            <data encoding=\"base64\">\n                ...\n            </data>\n        </image>\n    </tile>\n    <tile id=\"[n]\">\n        <!-- an individually referenced image for a single tile -->\n        <image source=\"file.png\"/>\n    </tile>\n    ...\n</tileset>",
            "title": "Tiled 0.9"
        },
        {
            "location": "/reference/tmx-changelog/#tiled-08",
            "text": "Tilesets can now have custom properties (using the  properties  child element, just like everything else).    Tilesets now support defining a drawing offset in pixels, which is to be used when drawing any tiles from that tileset. Example:    <tileset name=\"perspective_walls\" tilewidth=\"64\" tileheight=\"64\">\n    <tileoffset x=\"-32\" y=\"0\"/>\n    ...\n</tileset>   Support for tile rotation in 90-degree increments was added by using the third most significant bit in the global tile id. This new bit means \"anti-diagonal flip\", which swaps the x and y axis when rendering a tile.",
            "title": "Tiled 0.8"
        },
        {
            "location": "/reference/support-for-tmx-maps/",
            "text": "Libraries and Frameworks\n\u00b6\n\n\nThere are many libraries available for reading and/or writing maps stored in\nthe \nTMX map format\n as well as many development\nframeworks that include support for TMX maps. This list is divided into two\nsections:\n\n\n\n\nSupport by Language\n\n\nSupport by Framework\n\n\n\n\nFirst list is for developers who plan on implementing their own renderer. Second list is for developers already using (or considering) a particular game engine / graphics library who would rather pass on having to write their own tilemap renderer.\n\n\nFor updates to this page please open a pull request or issue \non github\n, thanks!\n\n\nSupport by Language\n\u00b6\n\n\nThese libraries typically include only a TMX parser, but no rendering support. They can be used universally and should not require a specific game engine or graphics library.\n\n\nC\n\u00b6\n\n\n\n\nTMX\n - XML and JSON map loader with Allegro5 and SDL2 examples (BSD).\n\n\n\n\nC++\n\u00b6\n\n\n\n\nC++/Boost\n by Tomas Andrle (limited functionality, single cpp file)\n\n\nC++/TinyXML based tmx-parser\n (BSD)\n\n\nOriginal version\n by KonoM is discontinued.\n\n\nC++/Qt based libtiled, used by Tiled itself and included at \nsrc/libtiled\n (BSD)\n\n\nC++11x/TinyXml2 libtmx-parser\n by halsafar. (zlib/tinyxml2)\n\n\nC++11/TinyXml2 libtmx\n by jube, for reading only (ISC licence). See \ndocumentation\n.\n\n\nTMXParser\n General *.tmx tileset data loader. Intended to be used with TSXParser for external tileset loading. (No internal tileset support)\n\n\nTSXParser\n General *.tsx tileset data loader. Intended to be used with TMXParser.\n\n\nTMXLoader\n based on \nRapidXml\n. Limited functionality (check the \nwebsite\n for details).\n\n\ntmxlite\n C++14 map parser with compressed map support but no external linking required. Includes examples for SFML and SDL2 rendering. Currently has full tmx support up to 0.16. (Zlib/libpng)\n\n\n\n\nC#/.NET\n\u00b6\n\n\n\n\nMonoGame.Extended\n has a Tiled map loader and renderer that works with MonoGame on all platforms that support portable class libraries.\n\n\nXNA map loader\n by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave (has dependency on XNA but supposedly can be turned into a standalone parser easily)\n\n\nTiledSharp\n: Yet another C# TMX importer library, with Tiled 0.11 support. TiledSharp is a generic parser which can be used in any framework, but it cannot be used to render the maps. Available via NuGet.\n\n\nNTiled\n: Generic parser for 0.9.1 tiled maps. Available via NuGet.\n\n\nTmxCSharp\n: Useful for multi-layer orthographic tile engines. No framework dependencies, used with a custom OpenTK tile engine soon to be open source, tested with Tiled 0.8.1 (multiple output formats). MIT license.\n\n\ntmx-mapper-pcl\n: PCL library for parsing Tiled map TMX files. This library could be used with MonoGame and Windows Runtime Universal apps.\n\n\n\n\nD\n\u00b6\n\n\n\n\ntiledMap.d\n simple single-layer and single-tileset example to load a map and its tileset in \nD language\n. It also contains basic rendering logic using \nDSFML\n\n\n\n\nGo\n\u00b6\n\n\n\n\ngithub.com/salviati/go-tmx/tmx\n\n\n\n\nHaskell\n\u00b6\n\n\n\n\nhtiled\n by \nChristian R\u00f8dli Amble\n.\n\n\n\n\nJava\n\u00b6\n\n\n\n\nA library for loading TMX files is included with Tiled at \nutil/java/libtiled-java\n.\n\n\nAndroid-Specific:\n\n\nAndroidTMXLoader\n loads TMX data into an object and renders to an Android Bitmap (limited functionality)\n\n\nlibtiled-java port\n is a port of the libtiled-java to be used on Android phones.\n\n\n\n\n\n\n\n\nPHP\n\u00b6\n\n\n\n\nPHP TMX Viewer\n by sebbu : render the map as an image (allow some modifications as well)\n\n\n\n\nPike\n\u00b6\n\n\n\n\nTMX parser\n: a simple loader for TMX maps (CSV format only).\n\n\n\n\nProcessing\n\u00b6\n\n\n\n\nlinux-man/ptmx\n: Add Tiled maps to your Processing sketch.\n\n\n\n\nPython\n\u00b6\n\n\n\n\npytmxlib\n: library for programmatic manipulation of TMX maps\n\n\npython-tmx\n: a simple library for reading and writing TMX files.\n\n\n\n\nRuby\n\u00b6\n\n\n\n\ntmx gem\n by erisdiscord\n\n\n\n\nVala\n\u00b6\n\n\n\n\nlibrpg\n A library to load and handle spritesets (own format) and orthogonal TMX maps.\n\n\n\n\nSupport by Framework\n\u00b6\n\n\nFollowing entries are integrated solutions for specific game engines. They are typically of little to no use if you're not using said game engine.\n\n\nAndEngine\n\u00b6\n\n\n\n\nAndEngine\n by Nicolas Gramlich supports \nrendering TMX maps\n\n\n\n\nAllegro\n\u00b6\n\n\n\n\nallegro_tiled\n integrates Tiled support with \nAllegro 5\n.\n\n\n\n\ncocos2d\n\u00b6\n\n\n\n\ncocos2d (Python)\n supports loading \nTiled maps\n through its \ncocos.tiles\n module.\n\n\ncocos2d-x (C++)\n supports loading TMX maps through the \nCCTMXTiledMap\n class.\n\n\ncocos2d-objc (Objective-C, Swift)\n (previously known as: cocos2d-iphone, cocos2d-swift, cocos2d-spritebuilder) supports loading TMX maps through \nCCTiledMap\n\n\nTilemapKit\n is a tilemapping framework for Cocos2D. It supports all TMX tilemap types, including staggered iso and all hex variations. No longer in development.\n\n\n\n\nConstruct 2 - Scirra\n\u00b6\n\n\n\n\nConstruct 2\n, since the Beta Release 149, officially supports TMX maps, and importing it by simple dragging the file inside the editor. \nOfficial Note\n\n\n\n\nCorona SDK\n\u00b6\n\n\n\n\nPonyTiled\n is a simple Tiled Map Loader for Corona SDK (\nforum announcement\n)\n\n\nDusk Engine\n is a fully featured Tiled map game engine for Corona SDK\n\n\n\n\nFlixel\n\u00b6\n\n\n\n\nLithander demonstrated his \nFlash TMX parser combined with Flixel rendering\n\n\n\n\nGame Maker\n\u00b6\n\n\n\n\nTiled2GM Converter\n by Dmi7ry\n\n\n\n\nGodot\n\u00b6\n\n\n\n\nTiled Map Importer\n imports each map as Godot scene which can be instanced or inherited (\nforum announcement\n)\n\n\n\n\nHaxe\n\u00b6\n\n\n\n\nHaxePunk\n Tiled Loader for HaxePunk\n\n\nHaxeFlixel\n\n\nOpenFL\n \"openfl-tiled\" is a library, which gives OpenFL developers the ability to use the Tiled Map Editor.\n\n\nOpenFL + Tiled + Flixel\n Experimental glue to use \"openfl-tiled\" with HaxeFlixel\n\n\n\n\nHTML5 (multiple engines)\n\u00b6\n\n\n\n\nCanvas Engine\n A framework to create video games in HTML5 Canvas\n\n\nchesterGL\n A simple WebGL/canvas game library\n\n\nKineticJs-Ext\n A multi-canvas based game rendering library\n\n\nmelonJS\n A lightweight HTML5 game engine\n\n\nPlatypus Engine\n A robust orthogonal tile game engine with game entity library.\n\n\nsprite.js\n A game framework for image sprites.\n\n\nTMXjs\n A JavaScript, jQuery and RequireJS-based TMX (Tile Map XML) parser and renderer.\n\n\nchem-tmx\n Plugin for \nchem\n game engine.\n\n\nGameJs\n JavaScript library for game programming; a thin wrapper to draw on HTML5 canvas and other useful modules for game development\n\n\nCrafty\n JavaScript HTML5 Game Engine; supports loading Tiled maps through an external component \nTiledMapBuilder\n.\n\n\nPhaser\n A fast, free and fun open source framework supporting both JavaScript and TypeScript (\nTiled tutorial\n)\n\n\nlinux-man/p5.tiledmap\n adds Tiled maps to \np5.js\n.\n\n\n\n\nindielib-crossplatform\n\u00b6\n\n\n\n\nindielib cross-platform\n supports loading TMX maps through the \nC++/TinyXML based tmx-parser\n by KonoM (BSD)\n\n\n\n\nLibGDX\n\u00b6\n\n\n\n\nlibgdx\n, a Java-based Android/desktop/HTML5 game library, \nprovides\n a packer, loader and renderer for TMX maps\n\n\n\n\nLITIengine\n\u00b6\n\n\n\n\nLITIengine\n is a 2D Java Game Engine that supports loading, saving and rendering maps in the .tmx format.\n\n\n\n\nL\u00d6VE\n\u00b6\n\n\n\n\nSimple Tiled Implementation\n Lua loader for the L\u00d6VE (Love2d) game framework.\n\n\n\n\nMOAI SDK\n\u00b6\n\n\n\n\nHanappe\n Framework for MOAI SDK.\n\n\nRapanui\n Framework for MOAI SDK.\n\n\n\n\nMonkey X\n\u00b6\n\n\n\n\nbit.tiled\n Loads TMX file as objects. Aims to be fully compatible with native TMX files.\n\n\nDiddy\n is an extensive framework for Monkey X that contains a module for loading and rendering TMX files.  Supports orthogonal and isometric maps as both CSV and Base64 (uncompressed).\n\n\n\n\nNode.js\n\u00b6\n\n\n\n\nnode-tmx-parser\n - loads the TMX file into a JavaScript object\n\n\n\n\nOrx Portable Game Engine\n\u00b6\n\n\n\n\nTMX to ORX Converter\n Tutorial and converter download for Orx.\n\n\n\n\nPygame\n\u00b6\n\n\n\n\nPygame map loader\n by dr0id\n\n\nPyTMX\n by Leif Theden (bitcraft)\n\n\ntmx.py\n by Richard Jones, from his \n2012 PyCon 'Introduction to Game Development' talk\n.\n\n\nTMX\n, a fork of tmx.py and a port to Python3.  A demo called pylletTown can be found \nhere\n.\n\n\n\n\nPyglet\n\u00b6\n\n\n\n\nJSON map loader/renderer for pyglet\n by Juan J. Mart\u00ednez (reidrac)\n\n\nPyTMX\n by Leif Theden (bitcraft)\n\n\n\n\nPySDL2\n\u00b6\n\n\n\n\nPyTMX\n by Leif Theden (bitcraft)\n\n\n\n\nSDL\n\u00b6\n\n\n\n\nC++/TinyXML/SDL based loader\n example by Rohin Knight (limited functionality)\n\n\n\n\nSFML\n\u00b6\n\n\n\n\nSTP\n (SFML TMX Parser) by edoren\n\n\nC++/SFML Tiled map loader\n by fallahn. (Zlib/libpng)\n\n\nC++/SfTileEngine\n by Tresky (currently limited functionality)\n\n\n\n\nSlick2D\n\u00b6\n\n\n\n\nSlick2D\n supports loading TMX maps through \nTiledMap\n.\n\n\n\n\nSprite Kit Framework\n\u00b6\n\n\n\n\nSKTilemap\n is built from the ground up in Swift. It's up to date, full of features and easy to integrate into any Sprite Kit project. Supports iOS and OSX.\n\n\nSKTiled\n - A Swift framework for working with Tiled assets in SpriteKit.\n\n\nTilemapKit\n is a tilemapping framework for Sprite Kit. It supports all TMX tilemap types, including staggered iso and all hex variations. No longer in development.\n\n\nJSTileMap\n is a lightweight SpriteKit implementation of the TMX format supporting iOS 7 and OS X 10.9 and above.\n\n\n\n\nTERRA Engine (Delphi/Pascal)\n\u00b6\n\n\n\n\nTERRA Engine\n supports loading and rendering of TMX maps.\n\n\n\n\nUnity 3D\n\u00b6\n\n\n\n\nOrthello Pro\n (2D framework) offers \nTiled map support\n.\n\n\nTiled Tilemaps\n library by Karnak Games adds support for Orthogonal TMX maps to Unity, with automatic collision detection.\n\n\nTiled To Unity\n is a 3D pipeline for Tiled maps. It uses prefabs as tiles, and can place decorations dynamically on tiles. Supports multiple layers (including object layers).\n\n\nTiled2Unity\n exports TMX files to Unity with support for (non-simple) collisions.\n\n\nUniTMX\n imports TMX files into a mesh.\n\n\nX-UniTMX\n supports almost all Tiled 0.10 features. Imports TMX/XML files into Sprite Objects or Meshes.\n\n\n\n\nUnreal Engine 4\n\u00b6\n\n\n\n\nPaper2D\n provides built-in support for tile maps and tile sets, importing JSON exported from Tiled.\n\n\n\n\nUrho3D\n\u00b6\n\n\n\n\nUrho3D\n natively supports loading Tiled maps as part of the \nUrho2D\n sublibrary (\nDocumentation\n, \nHTML5 example\n).\n\n\n\n\nXNA\n\u00b6\n\n\n\n\nFlatRedBall Engine TMXGlue tool\n by Domenic Datti loads TMX maps into the FlatRedBall engine, complete with node networks, pathfinding, and shapecollection support via object layers.\n\n\nTiledMax\n by Aimee Bailey, a .NET library for parsing TMX maps without dependencies on Windows or XNA\n\n\nXTiled\n by Michael C. Neel and Dylan Wolf, XNA library for loading and rendering TMX maps\n\n\nXNA map loader\n by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave",
            "title": "Libraries and Frameworks"
        },
        {
            "location": "/reference/support-for-tmx-maps/#libraries-and-frameworks",
            "text": "There are many libraries available for reading and/or writing maps stored in\nthe  TMX map format  as well as many development\nframeworks that include support for TMX maps. This list is divided into two\nsections:   Support by Language  Support by Framework   First list is for developers who plan on implementing their own renderer. Second list is for developers already using (or considering) a particular game engine / graphics library who would rather pass on having to write their own tilemap renderer.  For updates to this page please open a pull request or issue  on github , thanks!",
            "title": "Libraries and Frameworks"
        },
        {
            "location": "/reference/support-for-tmx-maps/#support-by-language",
            "text": "These libraries typically include only a TMX parser, but no rendering support. They can be used universally and should not require a specific game engine or graphics library.",
            "title": "Support by Language"
        },
        {
            "location": "/reference/support-for-tmx-maps/#c",
            "text": "TMX  - XML and JSON map loader with Allegro5 and SDL2 examples (BSD).",
            "title": "C"
        },
        {
            "location": "/reference/support-for-tmx-maps/#c_1",
            "text": "C++/Boost  by Tomas Andrle (limited functionality, single cpp file)  C++/TinyXML based tmx-parser  (BSD)  Original version  by KonoM is discontinued.  C++/Qt based libtiled, used by Tiled itself and included at  src/libtiled  (BSD)  C++11x/TinyXml2 libtmx-parser  by halsafar. (zlib/tinyxml2)  C++11/TinyXml2 libtmx  by jube, for reading only (ISC licence). See  documentation .  TMXParser  General *.tmx tileset data loader. Intended to be used with TSXParser for external tileset loading. (No internal tileset support)  TSXParser  General *.tsx tileset data loader. Intended to be used with TMXParser.  TMXLoader  based on  RapidXml . Limited functionality (check the  website  for details).  tmxlite  C++14 map parser with compressed map support but no external linking required. Includes examples for SFML and SDL2 rendering. Currently has full tmx support up to 0.16. (Zlib/libpng)",
            "title": "C++"
        },
        {
            "location": "/reference/support-for-tmx-maps/#cnet",
            "text": "MonoGame.Extended  has a Tiled map loader and renderer that works with MonoGame on all platforms that support portable class libraries.  XNA map loader  by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave (has dependency on XNA but supposedly can be turned into a standalone parser easily)  TiledSharp : Yet another C# TMX importer library, with Tiled 0.11 support. TiledSharp is a generic parser which can be used in any framework, but it cannot be used to render the maps. Available via NuGet.  NTiled : Generic parser for 0.9.1 tiled maps. Available via NuGet.  TmxCSharp : Useful for multi-layer orthographic tile engines. No framework dependencies, used with a custom OpenTK tile engine soon to be open source, tested with Tiled 0.8.1 (multiple output formats). MIT license.  tmx-mapper-pcl : PCL library for parsing Tiled map TMX files. This library could be used with MonoGame and Windows Runtime Universal apps.",
            "title": "C#/.NET"
        },
        {
            "location": "/reference/support-for-tmx-maps/#d",
            "text": "tiledMap.d  simple single-layer and single-tileset example to load a map and its tileset in  D language . It also contains basic rendering logic using  DSFML",
            "title": "D"
        },
        {
            "location": "/reference/support-for-tmx-maps/#go",
            "text": "github.com/salviati/go-tmx/tmx",
            "title": "Go"
        },
        {
            "location": "/reference/support-for-tmx-maps/#haskell",
            "text": "htiled  by  Christian R\u00f8dli Amble .",
            "title": "Haskell"
        },
        {
            "location": "/reference/support-for-tmx-maps/#java",
            "text": "A library for loading TMX files is included with Tiled at  util/java/libtiled-java .  Android-Specific:  AndroidTMXLoader  loads TMX data into an object and renders to an Android Bitmap (limited functionality)  libtiled-java port  is a port of the libtiled-java to be used on Android phones.",
            "title": "Java"
        },
        {
            "location": "/reference/support-for-tmx-maps/#php",
            "text": "PHP TMX Viewer  by sebbu : render the map as an image (allow some modifications as well)",
            "title": "PHP"
        },
        {
            "location": "/reference/support-for-tmx-maps/#pike",
            "text": "TMX parser : a simple loader for TMX maps (CSV format only).",
            "title": "Pike"
        },
        {
            "location": "/reference/support-for-tmx-maps/#processing",
            "text": "linux-man/ptmx : Add Tiled maps to your Processing sketch.",
            "title": "Processing"
        },
        {
            "location": "/reference/support-for-tmx-maps/#python",
            "text": "pytmxlib : library for programmatic manipulation of TMX maps  python-tmx : a simple library for reading and writing TMX files.",
            "title": "Python"
        },
        {
            "location": "/reference/support-for-tmx-maps/#ruby",
            "text": "tmx gem  by erisdiscord",
            "title": "Ruby"
        },
        {
            "location": "/reference/support-for-tmx-maps/#vala",
            "text": "librpg  A library to load and handle spritesets (own format) and orthogonal TMX maps.",
            "title": "Vala"
        },
        {
            "location": "/reference/support-for-tmx-maps/#support-by-framework",
            "text": "Following entries are integrated solutions for specific game engines. They are typically of little to no use if you're not using said game engine.",
            "title": "Support by Framework"
        },
        {
            "location": "/reference/support-for-tmx-maps/#andengine",
            "text": "AndEngine  by Nicolas Gramlich supports  rendering TMX maps",
            "title": "AndEngine"
        },
        {
            "location": "/reference/support-for-tmx-maps/#allegro",
            "text": "allegro_tiled  integrates Tiled support with  Allegro 5 .",
            "title": "Allegro"
        },
        {
            "location": "/reference/support-for-tmx-maps/#cocos2d",
            "text": "cocos2d (Python)  supports loading  Tiled maps  through its  cocos.tiles  module.  cocos2d-x (C++)  supports loading TMX maps through the  CCTMXTiledMap  class.  cocos2d-objc (Objective-C, Swift)  (previously known as: cocos2d-iphone, cocos2d-swift, cocos2d-spritebuilder) supports loading TMX maps through  CCTiledMap  TilemapKit  is a tilemapping framework for Cocos2D. It supports all TMX tilemap types, including staggered iso and all hex variations. No longer in development.",
            "title": "cocos2d"
        },
        {
            "location": "/reference/support-for-tmx-maps/#construct-2-scirra",
            "text": "Construct 2 , since the Beta Release 149, officially supports TMX maps, and importing it by simple dragging the file inside the editor.  Official Note",
            "title": "Construct 2 - Scirra"
        },
        {
            "location": "/reference/support-for-tmx-maps/#corona-sdk",
            "text": "PonyTiled  is a simple Tiled Map Loader for Corona SDK ( forum announcement )  Dusk Engine  is a fully featured Tiled map game engine for Corona SDK",
            "title": "Corona SDK"
        },
        {
            "location": "/reference/support-for-tmx-maps/#flixel",
            "text": "Lithander demonstrated his  Flash TMX parser combined with Flixel rendering",
            "title": "Flixel"
        },
        {
            "location": "/reference/support-for-tmx-maps/#game-maker",
            "text": "Tiled2GM Converter  by Dmi7ry",
            "title": "Game Maker"
        },
        {
            "location": "/reference/support-for-tmx-maps/#godot",
            "text": "Tiled Map Importer  imports each map as Godot scene which can be instanced or inherited ( forum announcement )",
            "title": "Godot"
        },
        {
            "location": "/reference/support-for-tmx-maps/#haxe",
            "text": "HaxePunk  Tiled Loader for HaxePunk  HaxeFlixel  OpenFL  \"openfl-tiled\" is a library, which gives OpenFL developers the ability to use the Tiled Map Editor.  OpenFL + Tiled + Flixel  Experimental glue to use \"openfl-tiled\" with HaxeFlixel",
            "title": "Haxe"
        },
        {
            "location": "/reference/support-for-tmx-maps/#html5-multiple-engines",
            "text": "Canvas Engine  A framework to create video games in HTML5 Canvas  chesterGL  A simple WebGL/canvas game library  KineticJs-Ext  A multi-canvas based game rendering library  melonJS  A lightweight HTML5 game engine  Platypus Engine  A robust orthogonal tile game engine with game entity library.  sprite.js  A game framework for image sprites.  TMXjs  A JavaScript, jQuery and RequireJS-based TMX (Tile Map XML) parser and renderer.  chem-tmx  Plugin for  chem  game engine.  GameJs  JavaScript library for game programming; a thin wrapper to draw on HTML5 canvas and other useful modules for game development  Crafty  JavaScript HTML5 Game Engine; supports loading Tiled maps through an external component  TiledMapBuilder .  Phaser  A fast, free and fun open source framework supporting both JavaScript and TypeScript ( Tiled tutorial )  linux-man/p5.tiledmap  adds Tiled maps to  p5.js .",
            "title": "HTML5 (multiple engines)"
        },
        {
            "location": "/reference/support-for-tmx-maps/#indielib-crossplatform",
            "text": "indielib cross-platform  supports loading TMX maps through the  C++/TinyXML based tmx-parser  by KonoM (BSD)",
            "title": "indielib-crossplatform"
        },
        {
            "location": "/reference/support-for-tmx-maps/#libgdx",
            "text": "libgdx , a Java-based Android/desktop/HTML5 game library,  provides  a packer, loader and renderer for TMX maps",
            "title": "LibGDX"
        },
        {
            "location": "/reference/support-for-tmx-maps/#litiengine",
            "text": "LITIengine  is a 2D Java Game Engine that supports loading, saving and rendering maps in the .tmx format.",
            "title": "LITIengine"
        },
        {
            "location": "/reference/support-for-tmx-maps/#love",
            "text": "Simple Tiled Implementation  Lua loader for the L\u00d6VE (Love2d) game framework.",
            "title": "L\u00d6VE"
        },
        {
            "location": "/reference/support-for-tmx-maps/#moai-sdk",
            "text": "Hanappe  Framework for MOAI SDK.  Rapanui  Framework for MOAI SDK.",
            "title": "MOAI SDK"
        },
        {
            "location": "/reference/support-for-tmx-maps/#monkey-x",
            "text": "bit.tiled  Loads TMX file as objects. Aims to be fully compatible with native TMX files.  Diddy  is an extensive framework for Monkey X that contains a module for loading and rendering TMX files.  Supports orthogonal and isometric maps as both CSV and Base64 (uncompressed).",
            "title": "Monkey X"
        },
        {
            "location": "/reference/support-for-tmx-maps/#nodejs",
            "text": "node-tmx-parser  - loads the TMX file into a JavaScript object",
            "title": "Node.js"
        },
        {
            "location": "/reference/support-for-tmx-maps/#orx-portable-game-engine",
            "text": "TMX to ORX Converter  Tutorial and converter download for Orx.",
            "title": "Orx Portable Game Engine"
        },
        {
            "location": "/reference/support-for-tmx-maps/#pygame",
            "text": "Pygame map loader  by dr0id  PyTMX  by Leif Theden (bitcraft)  tmx.py  by Richard Jones, from his  2012 PyCon 'Introduction to Game Development' talk .  TMX , a fork of tmx.py and a port to Python3.  A demo called pylletTown can be found  here .",
            "title": "Pygame"
        },
        {
            "location": "/reference/support-for-tmx-maps/#pyglet",
            "text": "JSON map loader/renderer for pyglet  by Juan J. Mart\u00ednez (reidrac)  PyTMX  by Leif Theden (bitcraft)",
            "title": "Pyglet"
        },
        {
            "location": "/reference/support-for-tmx-maps/#pysdl2",
            "text": "PyTMX  by Leif Theden (bitcraft)",
            "title": "PySDL2"
        },
        {
            "location": "/reference/support-for-tmx-maps/#sdl",
            "text": "C++/TinyXML/SDL based loader  example by Rohin Knight (limited functionality)",
            "title": "SDL"
        },
        {
            "location": "/reference/support-for-tmx-maps/#sfml",
            "text": "STP  (SFML TMX Parser) by edoren  C++/SFML Tiled map loader  by fallahn. (Zlib/libpng)  C++/SfTileEngine  by Tresky (currently limited functionality)",
            "title": "SFML"
        },
        {
            "location": "/reference/support-for-tmx-maps/#slick2d",
            "text": "Slick2D  supports loading TMX maps through  TiledMap .",
            "title": "Slick2D"
        },
        {
            "location": "/reference/support-for-tmx-maps/#sprite-kit-framework",
            "text": "SKTilemap  is built from the ground up in Swift. It's up to date, full of features and easy to integrate into any Sprite Kit project. Supports iOS and OSX.  SKTiled  - A Swift framework for working with Tiled assets in SpriteKit.  TilemapKit  is a tilemapping framework for Sprite Kit. It supports all TMX tilemap types, including staggered iso and all hex variations. No longer in development.  JSTileMap  is a lightweight SpriteKit implementation of the TMX format supporting iOS 7 and OS X 10.9 and above.",
            "title": "Sprite Kit Framework"
        },
        {
            "location": "/reference/support-for-tmx-maps/#terra-engine-delphipascal",
            "text": "TERRA Engine  supports loading and rendering of TMX maps.",
            "title": "TERRA Engine (Delphi/Pascal)"
        },
        {
            "location": "/reference/support-for-tmx-maps/#unity-3d",
            "text": "Orthello Pro  (2D framework) offers  Tiled map support .  Tiled Tilemaps  library by Karnak Games adds support for Orthogonal TMX maps to Unity, with automatic collision detection.  Tiled To Unity  is a 3D pipeline for Tiled maps. It uses prefabs as tiles, and can place decorations dynamically on tiles. Supports multiple layers (including object layers).  Tiled2Unity  exports TMX files to Unity with support for (non-simple) collisions.  UniTMX  imports TMX files into a mesh.  X-UniTMX  supports almost all Tiled 0.10 features. Imports TMX/XML files into Sprite Objects or Meshes.",
            "title": "Unity 3D"
        },
        {
            "location": "/reference/support-for-tmx-maps/#unreal-engine-4",
            "text": "Paper2D  provides built-in support for tile maps and tile sets, importing JSON exported from Tiled.",
            "title": "Unreal Engine 4"
        },
        {
            "location": "/reference/support-for-tmx-maps/#urho3d",
            "text": "Urho3D  natively supports loading Tiled maps as part of the  Urho2D  sublibrary ( Documentation ,  HTML5 example ).",
            "title": "Urho3D"
        },
        {
            "location": "/reference/support-for-tmx-maps/#xna",
            "text": "FlatRedBall Engine TMXGlue tool  by Domenic Datti loads TMX maps into the FlatRedBall engine, complete with node networks, pathfinding, and shapecollection support via object layers.  TiledMax  by Aimee Bailey, a .NET library for parsing TMX maps without dependencies on Windows or XNA  XTiled  by Michael C. Neel and Dylan Wolf, XNA library for loading and rendering TMX maps  XNA map loader  by Kevin Gadd, extended by Stephen Belanger and Zach Musgrave",
            "title": "XNA"
        }
    ]
}